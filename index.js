Index.PACKAGES = {"io.github.memo33.scdbpf" : [{"name" : "io.github.memo33.scdbpf.BufferedEntry", "shortDescription" : "A buffered entry whose data is held in memory in uncompressed form.", "members_case class" : [{"label" : "toRawEntry", "tail" : "(eh: ExceptionHandler): ![RawEntry, DbpfIoException]", "member" : "io.github.memo33.scdbpf.BufferedEntry.toRawEntry", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#toRawEntry(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):io.github.memo33.scdbpf.RawEntry!io.github.memo33.scdbpf.DbpfIoException", "kind" : "def"}, {"label" : "toBufferedEntry", "tail" : "(eh: ExceptionHandler): ![BufferedEntry[DbpfType], DbpfIoException]", "member" : "io.github.memo33.scdbpf.BufferedEntry.toBufferedEntry", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#toBufferedEntry(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):io.github.memo33.scdbpf.BufferedEntry[io.github.memo33.scdbpf.DbpfType]!io.github.memo33.scdbpf.DbpfIoException", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): BufferedEntry[B]", "member" : "io.github.memo33.scdbpf.BufferedEntry.map", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#map[B<:io.github.memo33.scdbpf.DbpfType](f:A=>B):io.github.memo33.scdbpf.BufferedEntry[B]", "kind" : "def"}, {"label" : "convertContentTo", "tail" : "(dbpfType: WithContentConverter[B])(eh: ExceptionHandler): ![BufferedEntry[B], DbpfDecodeFailedException]", "member" : "io.github.memo33.scdbpf.BufferedEntry.convertContentTo", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#convertContentTo[B<:io.github.memo33.scdbpf.DbpfType](dbpfType:io.github.memo33.scdbpf.WithContentConverter[B])(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):io.github.memo33.scdbpf.BufferedEntry[B]!io.github.memo33.scdbpf.DbpfDecodeFailedException", "kind" : "def"}, {"label" : "convert", "tail" : "(eh: ExceptionHandler, conv: Converter[BufferedEntry[A], BufferedEntry[B]]): ![BufferedEntry[B], DbpfDecodeFailedException]", "member" : "io.github.memo33.scdbpf.BufferedEntry.convert", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#convert[B<:io.github.memo33.scdbpf.DbpfType](impliciteh:io.github.memo33.scdbpf.ExceptionHandler,implicitconv:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.BufferedEntry[A],io.github.memo33.scdbpf.BufferedEntry[B]]):io.github.memo33.scdbpf.BufferedEntry[B]!io.github.memo33.scdbpf.DbpfDecodeFailedException", "kind" : "def"}, {"label" : "input", "tail" : "(): Input[Byte]", "member" : "io.github.memo33.scdbpf.BufferedEntry.input", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#input():io.github.memo33.scdbpf.compat.Input[Byte]", "kind" : "def"}, {"member" : "io.github.memo33.scdbpf.BufferedEntry#<init>", "error" : "unsupported entity"}, {"label" : "compressed", "tail" : ": Boolean", "member" : "io.github.memo33.scdbpf.BufferedEntry.compressed", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#compressed:Boolean", "kind" : "val"}, {"label" : "content", "tail" : ": A", "member" : "io.github.memo33.scdbpf.BufferedEntry.content", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#content:A", "kind" : "val"}, {"label" : "tgi", "tail" : ": Tgi", "member" : "io.github.memo33.scdbpf.BufferedEntry.tgi", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#tgi:io.github.memo33.scdbpf.Tgi", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/github\/memo33\/scdbpf\/BufferedEntry.html", "kind" : "case class"}, {"name" : "io.github.memo33.scdbpf.DbpfEntry", "trait" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html", "kind" : "trait", "members_trait" : [{"label" : "toRawEntry", "tail" : "(eh: ExceptionHandler): ![RawEntry, DbpfIoException]", "member" : "io.github.memo33.scdbpf.DbpfEntry.toRawEntry", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#toRawEntry(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):io.github.memo33.scdbpf.RawEntry!io.github.memo33.scdbpf.DbpfIoException", "kind" : "def"}, {"label" : "toBufferedEntry", "tail" : "(eh: ExceptionHandler): ![BufferedEntry[DbpfType], DbpfIoException]", "member" : "io.github.memo33.scdbpf.DbpfEntry.toBufferedEntry", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#toBufferedEntry(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):io.github.memo33.scdbpf.BufferedEntry[io.github.memo33.scdbpf.DbpfType]!io.github.memo33.scdbpf.DbpfIoException", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "input", "tail" : "(): Input[Byte]", "member" : "io.github.memo33.scdbpf.DbpfEntry.input", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#input():io.github.memo33.scdbpf.compat.Input[Byte]", "kind" : "abstract def"}, {"label" : "tgi", "tail" : "(): Tgi", "member" : "io.github.memo33.scdbpf.DbpfEntry.tgi", "link" : "io\/github\/memo33\/scdbpf\/DbpfEntry.html#tgi:io.github.memo33.scdbpf.Tgi", "kind" : "abstract def"}], "shortDescription" : "The base trait for entries of a DBPF file."}, {"name" : "io.github.memo33.scdbpf.DbpfExceptions", "shortDescription" : "", "object" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html", "members_object" : [{"label" : "DbpfDecodeFailedException", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfExceptions.DbpfDecodeFailedException", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#DbpfDecodeFailedExceptionextendsExceptionwithDbpfExceptions.DbpfException", "kind" : "class"}, {"label" : "DbpfStreamOutOfDateException", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfExceptions.DbpfStreamOutOfDateException", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#DbpfStreamOutOfDateExceptionextendsDbpfExceptions.DbpfIoException", "kind" : "class"}, {"label" : "DbpfFileFormatException", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfExceptions.DbpfFileFormatException", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#DbpfFileFormatExceptionextendsDbpfExceptions.DbpfIoException", "kind" : "class"}, {"label" : "DbpfIoException", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfExceptions.DbpfIoException", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#DbpfIoExceptionextendsIOExceptionwithDbpfExceptions.DbpfException", "kind" : "class"}, {"label" : "DbpfException", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfExceptions.DbpfException", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#DbpfExceptionextendsException", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfExceptions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.github.memo33.scdbpf.DbpfFile", "shortDescription" : "A container for DbpfEntries that are read from and written to a file.", "object" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html", "members_class" : [{"label" : "write", "tail" : "(entries: IterableOnce[DbpfEntry], file: JFile, dateModified: Option[UInt])(eh: ExceptionHandler): ![DbpfFile, IOException]", "member" : "io.github.memo33.scdbpf.DbpfFile.write", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#write(entries:collection.compat.IterableOnce[io.github.memo33.scdbpf.DbpfEntry],file:io.github.memo33.scdbpf.JFile,dateModified:Option[io.github.memo33.passera.unsigned.UInt])(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):io.github.memo33.scdbpf.DbpfFile!java.io.IOException", "kind" : "def"}, {"label" : "tgiMap", "tail" : ": Map[Tgi, StreamedEntry]", "member" : "io.github.memo33.scdbpf.DbpfFile.tgiMap", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#tgiMap:scala.collection.immutable.Map[io.github.memo33.scdbpf.Tgi,io.github.memo33.scdbpf.StreamedEntry]", "kind" : "lazy val"}, {"label" : "entries", "tail" : ": IndexedSeq[StreamedEntry]", "member" : "io.github.memo33.scdbpf.DbpfFile.entries", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#entries:IndexedSeq[io.github.memo33.scdbpf.StreamedEntry]", "kind" : "val"}, {"label" : "header", "tail" : ": Header", "member" : "io.github.memo33.scdbpf.DbpfFile.header", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#header:io.github.memo33.scdbpf.DbpfFile.Header", "kind" : "val"}, {"label" : "file", "tail" : ": JFile", "member" : "io.github.memo33.scdbpf.DbpfFile.file", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#file:io.github.memo33.scdbpf.JFile", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "write", "tail" : "(entries: IterableOnce[DbpfEntry], file: JFile, dateCreated: Option[UInt], dateModified: Option[UInt])(eh: ExceptionHandler): ![DbpfFile, IOException]", "member" : "io.github.memo33.scdbpf.DbpfFile.write", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#write(entries:collection.compat.IterableOnce[io.github.memo33.scdbpf.DbpfEntry],file:io.github.memo33.scdbpf.JFile,dateCreated:Option[io.github.memo33.passera.unsigned.UInt],dateModified:Option[io.github.memo33.passera.unsigned.UInt])(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):io.github.memo33.scdbpf.DbpfFile!java.io.IOException", "kind" : "def"}, {"label" : "read", "tail" : "(file: JFile)(eh: ExceptionHandler): ![DbpfFile, IOException]", "member" : "io.github.memo33.scdbpf.DbpfFile.read", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#read(file:io.github.memo33.scdbpf.JFile)(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):io.github.memo33.scdbpf.DbpfFile!java.io.IOException", "kind" : "def"}, {"label" : "Header", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfFile.Header", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#HeaderextendsAnyRef", "kind" : "class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfFile$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/github\/memo33\/scdbpf\/DbpfFile.html", "kind" : "class"}, {"name" : "io.github.memo33.scdbpf.DbpfPackager", "shortDescription" : "Provides method for QFS compressing and decompressing.", "object" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html", "members_object" : [{"label" : "decompress", "tail" : "(cData: Array[Byte]): Array[Byte]", "member" : "io.github.memo33.scdbpf.DbpfPackager.decompress", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#decompress(cData:Array[Byte]):Array[Byte]", "kind" : "def"}, {"label" : "compress", "tail" : "(dData: Array[Byte]): Array[Byte]", "member" : "io.github.memo33.scdbpf.DbpfPackager.compress", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#compress(dData:Array[Byte]):Array[Byte]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfPackager$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.github.memo33.scdbpf.DbpfProperty", "shortDescription" : "", "object" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html", "members_object" : [{"label" : "Multi", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfProperty.Multi", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#Multi", "kind" : "object"}, {"label" : "Multi", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfProperty.Multi", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#Multi[A]extendsDbpfProperty.PropertyList[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "Single", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfProperty.Single", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#Single", "kind" : "object"}, {"label" : "Single", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfProperty.Single", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#Single[A]extendsDbpfProperty.PropertyList[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "apply", "tail" : "(value: A)(vt: ValueType[A]): Single[A]", "member" : "io.github.memo33.scdbpf.DbpfProperty.apply", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#apply[A](value:A)(implicitvt:io.github.memo33.scdbpf.DbpfProperty.ValueType[A]):io.github.memo33.scdbpf.DbpfProperty.Single[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: Seq[A])(arg0: NumericalValueType[A]): Multi[A]", "member" : "io.github.memo33.scdbpf.DbpfProperty.apply", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#apply[A](values:Seq[A])(implicitevidence$1:io.github.memo33.scdbpf.DbpfProperty.NumericalValueType[A]):io.github.memo33.scdbpf.DbpfProperty.Multi[A]", "kind" : "def"}, {"label" : "ValueType", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfProperty.ValueType", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#ValueType", "kind" : "object"}, {"label" : "NumericalValueType", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfProperty.NumericalValueType", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#NumericalValueType[D]=io.github.memo33.scdbpf.DbpfProperty.ValueType.ValueType[D]withio.github.memo33.scdbpf.DbpfProperty.ValueType.Numerical[D]", "kind" : "type"}, {"label" : "ValueType", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfProperty.ValueType", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#ValueType[D]=io.github.memo33.scdbpf.DbpfProperty.ValueType.ValueType[D]", "kind" : "type"}, {"label" : "Property", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfProperty.Property", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#Property=(io.github.memo33.passera.unsigned.UInt,io.github.memo33.scdbpf.DbpfProperty.PropList)", "kind" : "type"}, {"label" : "PropList", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfProperty.PropList", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#PropList=io.github.memo33.scdbpf.DbpfProperty.PropertyList[_]", "kind" : "type"}, {"label" : "PropertyList", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfProperty.PropertyList", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#PropertyList[A]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfProperty$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.github.memo33.scdbpf.DbpfType", "trait" : "io\/github\/memo33\/scdbpf\/DbpfType.html", "kind" : "trait", "members_trait" : [{"label" : "convertTo", "tail" : "(dbpfType: DbpfTypeCompanion[B])(eh: ExceptionHandler): ![B, DbpfDecodeFailedException]", "member" : "io.github.memo33.scdbpf.DbpfType.convertTo", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#convertTo[B<:io.github.memo33.scdbpf.DbpfType](dbpfType:io.github.memo33.scdbpf.DbpfTypeCompanion[B])(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):B!io.github.memo33.scdbpf.DbpfDecodeFailedException", "kind" : "def"}, {"label" : "convert", "tail" : "(eh: ExceptionHandler, conv: Converter[DbpfType, B]): ![B, DbpfDecodeFailedException]", "member" : "io.github.memo33.scdbpf.DbpfType.convert", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#convert[B<:io.github.memo33.scdbpf.DbpfType](impliciteh:io.github.memo33.scdbpf.ExceptionHandler,implicitconv:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.DbpfType,B]):B!io.github.memo33.scdbpf.DbpfDecodeFailedException", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "data", "tail" : "(): Array[Byte]", "member" : "io.github.memo33.scdbpf.DbpfType.data", "link" : "io\/github\/memo33\/scdbpf\/DbpfType.html#data:Array[Byte]", "kind" : "abstract def"}], "shortDescription" : "The base trait for the content type of DbpfEntries."}, {"name" : "io.github.memo33.scdbpf.DbpfTypeCompanion", "trait" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html", "kind" : "trait", "members_trait" : [{"label" : "contentConverter", "tail" : "(): Converter[BufferedEntry[DbpfType], BufferedEntry[B]]", "member" : "io.github.memo33.scdbpf.DbpfTypeCompanion.contentConverter", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#contentConverter:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.BufferedEntry[io.github.memo33.scdbpf.DbpfType],io.github.memo33.scdbpf.BufferedEntry[B]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "converter", "tail" : "(): Converter[DbpfType, B]", "member" : "io.github.memo33.scdbpf.DbpfTypeCompanion.converter", "link" : "io\/github\/memo33\/scdbpf\/DbpfTypeCompanion.html#converter:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.DbpfType,B]", "kind" : "abstract def"}], "shortDescription" : "This trait defines the converters that should be implemented by companionobjects of DbpfTypes."}, {"name" : "io.github.memo33.scdbpf.DbpfUtil", "shortDescription" : "", "object" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html", "members_object" : [{"label" : "Converter", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfUtil.Converter", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#Converter[-A,+B]extendsAnyRef", "kind" : "trait"}, {"label" : "Dihedral", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfUtil.Dihedral", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#Dihedral", "kind" : "object"}, {"label" : "numericToNegatable", "tail" : "(arg0: Numeric[B]): Negatable[B]", "member" : "io.github.memo33.scdbpf.DbpfUtil.numericToNegatable", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#numericToNegatable[B](implicitevidence$1:Numeric[B]):io.github.memo33.scdbpf.DbpfUtil.Negatable[B]", "kind" : "implicit def"}, {"label" : "Dihedral", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfUtil.Dihedral", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#Dihedral[A,B]extendsAnyRef", "kind" : "trait"}, {"label" : "Negatable", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfUtil.Negatable", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#Negatable[B]extendsAnyRef", "kind" : "trait"}, {"label" : "RotFlip", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfUtil.RotFlip", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#RotFlip", "kind" : "object"}, {"label" : "RotFlip", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfUtil.RotFlip", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#RotFlip=io.github.memo33.scdbpf.DbpfUtil.RotFlip.RFVal", "kind" : "type"}, {"label" : "MagicNumber", "tail" : "", "member" : "io.github.memo33.scdbpf.DbpfUtil.MagicNumber", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#MagicNumber", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/DbpfUtil$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.github.memo33.scdbpf.Exemplar", "object" : "io\/github\/memo33\/scdbpf\/Exemplar$.html", "members_object" : [{"label" : "ordering", "tail" : ": UIntOrdering.type", "member" : "io.github.memo33.scdbpf.Exemplar.ordering", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#ordering:io.github.memo33.passera.unsigned.UIntOrdering.type", "kind" : "val"}, {"label" : "contentConverter", "tail" : "(): Converter[BufferedEntry[DbpfType], BufferedEntry[Exemplar]]", "member" : "io.github.memo33.scdbpf.Exemplar.contentConverter", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#contentConverter:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.BufferedEntry[io.github.memo33.scdbpf.DbpfType],io.github.memo33.scdbpf.BufferedEntry[io.github.memo33.scdbpf.Exemplar]]", "kind" : "def"}, {"label" : "converter", "tail" : "(): Converter[BufferedEntry[DbpfType], BufferedEntry[Exemplar]]", "member" : "io.github.memo33.scdbpf.Exemplar.converter", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#converter:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.BufferedEntry[io.github.memo33.scdbpf.DbpfType],io.github.memo33.scdbpf.BufferedEntry[io.github.memo33.scdbpf.Exemplar]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(parent: Tgi, isCohort: Boolean, props: IterableOnce[Property]): Exemplar", "member" : "io.github.memo33.scdbpf.Exemplar.apply", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#apply(parent:io.github.memo33.scdbpf.Tgi,isCohort:Boolean,props:collection.compat.IterableOnce[io.github.memo33.scdbpf.DbpfProperty.Property]):io.github.memo33.scdbpf.Exemplar", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Exemplar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/github\/memo33\/scdbpf\/Exemplar.html", "kind" : "trait", "members_trait" : [{"label" : "apply", "tail" : "(id: UInt): Property", "member" : "io.github.memo33.scdbpf.Exemplar.apply", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#apply(id:io.github.memo33.passera.unsigned.UInt):io.github.memo33.scdbpf.DbpfProperty.Property", "kind" : "def"}, {"label" : "copy", "tail" : "(parent: Tgi, isCohort: Boolean, properties: SortedMap[UInt, PropList]): Exemplar", "member" : "io.github.memo33.scdbpf.Exemplar.copy", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#copy(parent:io.github.memo33.scdbpf.Tgi,isCohort:Boolean,properties:scala.collection.immutable.SortedMap[io.github.memo33.passera.unsigned.UInt,io.github.memo33.scdbpf.DbpfProperty.PropList]):io.github.memo33.scdbpf.Exemplar", "kind" : "def"}, {"label" : "convertTo", "tail" : "(dbpfType: DbpfTypeCompanion[B])(eh: ExceptionHandler): ![B, DbpfDecodeFailedException]", "member" : "io.github.memo33.scdbpf.DbpfType.convertTo", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#convertTo[B<:io.github.memo33.scdbpf.DbpfType](dbpfType:io.github.memo33.scdbpf.DbpfTypeCompanion[B])(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):B!io.github.memo33.scdbpf.DbpfDecodeFailedException", "kind" : "def"}, {"label" : "convert", "tail" : "(eh: ExceptionHandler, conv: Converter[DbpfType, B]): ![B, DbpfDecodeFailedException]", "member" : "io.github.memo33.scdbpf.DbpfType.convert", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#convert[B<:io.github.memo33.scdbpf.DbpfType](impliciteh:io.github.memo33.scdbpf.ExceptionHandler,implicitconv:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.DbpfType,B]):B!io.github.memo33.scdbpf.DbpfDecodeFailedException", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isCohort", "tail" : ": Boolean", "member" : "io.github.memo33.scdbpf.Exemplar.isCohort", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#isCohort:Boolean", "kind" : "abstract val"}, {"label" : "properties", "tail" : ": SortedMap[UInt, PropList]", "member" : "io.github.memo33.scdbpf.Exemplar.properties", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#properties:scala.collection.immutable.SortedMap[io.github.memo33.passera.unsigned.UInt,io.github.memo33.scdbpf.DbpfProperty.PropList]", "kind" : "abstract val"}, {"label" : "parent", "tail" : ": Tgi", "member" : "io.github.memo33.scdbpf.Exemplar.parent", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#parent:io.github.memo33.scdbpf.Tgi", "kind" : "abstract val"}, {"label" : "data", "tail" : "(): Array[Byte]", "member" : "io.github.memo33.scdbpf.DbpfType.data", "link" : "io\/github\/memo33\/scdbpf\/Exemplar.html#data:Array[Byte]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "io.github.memo33.scdbpf.Experimental", "shortDescription" : "Provides a few experimental functions that are useful, but which may stillbe changed in the future.", "object" : "io\/github\/memo33\/scdbpf\/Experimental$.html", "members_object" : [{"label" : "PreviewEffect", "tail" : "", "member" : "io.github.memo33.scdbpf.Experimental.PreviewEffect", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#PreviewEffect", "kind" : "object"}, {"label" : "bufferedImageAsImage", "tail" : "(img: BufferedImage): Image[RGBA]", "member" : "io.github.memo33.scdbpf.Experimental.bufferedImageAsImage", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#bufferedImageAsImage(img:java.awt.image.BufferedImage):io.github.memo33.scdbpf.compat.Image[io.github.memo33.scdbpf.compat.RGBA]", "kind" : "implicit def"}, {"label" : "imageToBufferedImage", "tail" : "(img: Image[RGBA]): BufferedImage", "member" : "io.github.memo33.scdbpf.Experimental.imageToBufferedImage", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#imageToBufferedImage(img:io.github.memo33.scdbpf.compat.Image[io.github.memo33.scdbpf.compat.RGBA]):java.awt.image.BufferedImage", "kind" : "def"}, {"label" : "dbpfFileTreeIterator", "tail" : "(file: JFile): Iterator[JFile]", "member" : "io.github.memo33.scdbpf.Experimental.dbpfFileTreeIterator", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#dbpfFileTreeIterator(file:io.github.memo33.scdbpf.JFile):Iterator[io.github.memo33.scdbpf.JFile]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Experimental$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.github.memo33.scdbpf.Fsh", "object" : "io\/github\/memo33\/scdbpf\/Fsh$.html", "members_object" : [{"label" : "FshFormat", "tail" : "", "member" : "io.github.memo33.scdbpf.Fsh.FshFormat", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#FshFormat", "kind" : "object"}, {"label" : "FshFormat", "tail" : "", "member" : "io.github.memo33.scdbpf.Fsh.FshFormat", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#FshFormat=io.github.memo33.scdbpf.Fsh.FshFormat.FshFmtVal", "kind" : "type"}, {"label" : "FshDirectoryId", "tail" : "", "member" : "io.github.memo33.scdbpf.Fsh.FshDirectoryId", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#FshDirectoryId", "kind" : "object"}, {"label" : "FshDirectoryId", "tail" : "", "member" : "io.github.memo33.scdbpf.Fsh.FshDirectoryId", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#FshDirectoryId=io.github.memo33.scdbpf.Fsh.FshDirectoryId.FshDirVal", "kind" : "type"}, {"label" : "FshElement", "tail" : "", "member" : "io.github.memo33.scdbpf.Fsh.FshElement", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#FshElementextendsAnyRef", "kind" : "class"}, {"label" : "apply", "tail" : "(elements: Seq[FshElement], dirId: FshDirectoryId): Fsh", "member" : "io.github.memo33.scdbpf.Fsh.apply", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#apply(elements:Seq[io.github.memo33.scdbpf.Fsh.FshElement],dirId:io.github.memo33.scdbpf.Fsh.FshDirectoryId):io.github.memo33.scdbpf.Fsh", "kind" : "def"}, {"label" : "converter", "tail" : ": Converter[DbpfType, Fsh]", "member" : "io.github.memo33.scdbpf.Fsh.converter", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#converter:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.DbpfType,io.github.memo33.scdbpf.Fsh]", "kind" : "implicit val"}, {"label" : "contentConverter", "tail" : "(): Converter[BufferedEntry[DbpfType], BufferedEntry[Fsh]]", "member" : "io.github.memo33.scdbpf.DbpfTypeCompanion.contentConverter", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#contentConverter:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.BufferedEntry[io.github.memo33.scdbpf.DbpfType],io.github.memo33.scdbpf.BufferedEntry[B]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Fsh$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/github\/memo33\/scdbpf\/Fsh.html", "kind" : "trait", "members_trait" : [{"label" : "image", "tail" : "(): Image[RGBA]", "member" : "io.github.memo33.scdbpf.Fsh.image", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#image:io.github.memo33.scdbpf.compat.Image[io.github.memo33.scdbpf.compat.RGBA]", "kind" : "def"}, {"label" : "copy", "tail" : "(elements: Seq[FshElement], dirId: FshDirectoryId): Fsh", "member" : "io.github.memo33.scdbpf.Fsh.copy", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#copy(elements:Seq[io.github.memo33.scdbpf.Fsh.FshElement],dirId:io.github.memo33.scdbpf.Fsh.FshDirectoryId):io.github.memo33.scdbpf.Fsh", "kind" : "def"}, {"label" : "convertTo", "tail" : "(dbpfType: DbpfTypeCompanion[B])(eh: ExceptionHandler): ![B, DbpfDecodeFailedException]", "member" : "io.github.memo33.scdbpf.DbpfType.convertTo", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#convertTo[B<:io.github.memo33.scdbpf.DbpfType](dbpfType:io.github.memo33.scdbpf.DbpfTypeCompanion[B])(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):B!io.github.memo33.scdbpf.DbpfDecodeFailedException", "kind" : "def"}, {"label" : "convert", "tail" : "(eh: ExceptionHandler, conv: Converter[DbpfType, B]): ![B, DbpfDecodeFailedException]", "member" : "io.github.memo33.scdbpf.DbpfType.convert", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#convert[B<:io.github.memo33.scdbpf.DbpfType](impliciteh:io.github.memo33.scdbpf.ExceptionHandler,implicitconv:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.DbpfType,B]):B!io.github.memo33.scdbpf.DbpfDecodeFailedException", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "dirId", "tail" : ": FshDirectoryId", "member" : "io.github.memo33.scdbpf.Fsh.dirId", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#dirId:io.github.memo33.scdbpf.Fsh.FshDirectoryId", "kind" : "abstract val"}, {"label" : "elements", "tail" : ": Seq[FshElement]", "member" : "io.github.memo33.scdbpf.Fsh.elements", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#elements:Seq[io.github.memo33.scdbpf.Fsh.FshElement]", "kind" : "abstract val"}, {"label" : "data", "tail" : "(): Array[Byte]", "member" : "io.github.memo33.scdbpf.DbpfType.data", "link" : "io\/github\/memo33\/scdbpf\/Fsh.html#data:Array[Byte]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "io.github.memo33.scdbpf.LText", "object" : "io\/github\/memo33\/scdbpf\/LText$.html", "members_object" : [{"label" : "converter", "tail" : ": Converter[DbpfType, LText]", "member" : "io.github.memo33.scdbpf.LText.converter", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#converter:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.DbpfType,io.github.memo33.scdbpf.LText]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(text: String): LText", "member" : "io.github.memo33.scdbpf.LText.apply", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#apply(text:String):io.github.memo33.scdbpf.LText", "kind" : "def"}, {"label" : "contentConverter", "tail" : "(): Converter[BufferedEntry[DbpfType], BufferedEntry[LText]]", "member" : "io.github.memo33.scdbpf.DbpfTypeCompanion.contentConverter", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#contentConverter:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.BufferedEntry[io.github.memo33.scdbpf.DbpfType],io.github.memo33.scdbpf.BufferedEntry[B]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/LText$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/LText$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/github\/memo33\/scdbpf\/LText.html", "kind" : "trait", "members_trait" : [{"label" : "convertTo", "tail" : "(dbpfType: DbpfTypeCompanion[B])(eh: ExceptionHandler): ![B, DbpfDecodeFailedException]", "member" : "io.github.memo33.scdbpf.DbpfType.convertTo", "link" : "io\/github\/memo33\/scdbpf\/LText.html#convertTo[B<:io.github.memo33.scdbpf.DbpfType](dbpfType:io.github.memo33.scdbpf.DbpfTypeCompanion[B])(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):B!io.github.memo33.scdbpf.DbpfDecodeFailedException", "kind" : "def"}, {"label" : "convert", "tail" : "(eh: ExceptionHandler, conv: Converter[DbpfType, B]): ![B, DbpfDecodeFailedException]", "member" : "io.github.memo33.scdbpf.DbpfType.convert", "link" : "io\/github\/memo33\/scdbpf\/LText.html#convert[B<:io.github.memo33.scdbpf.DbpfType](impliciteh:io.github.memo33.scdbpf.ExceptionHandler,implicitconv:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.DbpfType,B]):B!io.github.memo33.scdbpf.DbpfDecodeFailedException", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/LText.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/LText.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/LText.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/LText.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/LText.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/LText.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/LText.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/LText.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/LText.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/LText.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/LText.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/LText.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/LText.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/LText.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/LText.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/LText.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/LText.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/LText.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/LText.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "text", "tail" : ": String", "member" : "io.github.memo33.scdbpf.LText.text", "link" : "io\/github\/memo33\/scdbpf\/LText.html#text:String", "kind" : "abstract val"}, {"label" : "data", "tail" : "(): Array[Byte]", "member" : "io.github.memo33.scdbpf.DbpfType.data", "link" : "io\/github\/memo33\/scdbpf\/LText.html#data:Array[Byte]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "io.github.memo33.scdbpf.RawEntry", "shortDescription" : "A buffered entry whose raw byte data is held in an array, that is, the exactdata that would be written to a file (compressed or uncompressed).", "members_class" : [{"label" : "toBufferedEntry", "tail" : "(eh: ExceptionHandler): ![BufferedEntry[DbpfType], DbpfIoException]", "member" : "io.github.memo33.scdbpf.RawEntry.toBufferedEntry", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#toBufferedEntry(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):io.github.memo33.scdbpf.BufferedEntry[io.github.memo33.scdbpf.DbpfType]!io.github.memo33.scdbpf.DbpfIoException", "kind" : "def"}, {"label" : "toRawEntry", "tail" : "(eh: ExceptionHandler): ![RawEntry, DbpfIoException]", "member" : "io.github.memo33.scdbpf.RawEntry.toRawEntry", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#toRawEntry(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):io.github.memo33.scdbpf.RawEntry!io.github.memo33.scdbpf.DbpfIoException", "kind" : "def"}, {"label" : "copy", "tail" : "(tgi: Tgi): RawEntry", "member" : "io.github.memo33.scdbpf.RawEntry.copy", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#copy(tgi:io.github.memo33.scdbpf.Tgi):io.github.memo33.scdbpf.RawEntry", "kind" : "def"}, {"label" : "compressed", "tail" : "(): Boolean", "member" : "io.github.memo33.scdbpf.RawEntry.compressed", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#compressed:Boolean", "kind" : "def"}, {"label" : "input", "tail" : "(): Input[Byte]", "member" : "io.github.memo33.scdbpf.RawEntry.input", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#input():io.github.memo33.scdbpf.compat.Input[Byte]", "kind" : "def"}, {"member" : "io.github.memo33.scdbpf.RawEntry#<init>", "error" : "unsupported entity"}, {"label" : "tgi", "tail" : ": Tgi", "member" : "io.github.memo33.scdbpf.RawEntry.tgi", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#tgi:io.github.memo33.scdbpf.Tgi", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/RawEntry.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/github\/memo33\/scdbpf\/RawEntry.html", "kind" : "class"}, {"name" : "io.github.memo33.scdbpf.RawType", "shortDescription" : "A raw type that does not represent any specific format.", "object" : "io\/github\/memo33\/scdbpf\/RawType$.html", "members_class" : [{"member" : "io.github.memo33.scdbpf.RawType#<init>", "error" : "unsupported entity"}, {"label" : "data", "tail" : ": Array[Byte]", "member" : "io.github.memo33.scdbpf.RawType.data", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#data:Array[Byte]", "kind" : "val"}, {"label" : "convertTo", "tail" : "(dbpfType: DbpfTypeCompanion[B])(eh: ExceptionHandler): ![B, DbpfDecodeFailedException]", "member" : "io.github.memo33.scdbpf.DbpfType.convertTo", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#convertTo[B<:io.github.memo33.scdbpf.DbpfType](dbpfType:io.github.memo33.scdbpf.DbpfTypeCompanion[B])(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):B!io.github.memo33.scdbpf.DbpfDecodeFailedException", "kind" : "def"}, {"label" : "convert", "tail" : "(eh: ExceptionHandler, conv: Converter[DbpfType, B]): ![B, DbpfDecodeFailedException]", "member" : "io.github.memo33.scdbpf.DbpfType.convert", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#convert[B<:io.github.memo33.scdbpf.DbpfType](impliciteh:io.github.memo33.scdbpf.ExceptionHandler,implicitconv:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.DbpfType,B]):B!io.github.memo33.scdbpf.DbpfDecodeFailedException", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/RawType.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/RawType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(data: Array[Byte]): RawType", "member" : "io.github.memo33.scdbpf.RawType.apply", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#apply(data:Array[Byte]):io.github.memo33.scdbpf.RawType", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/RawType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/github\/memo33\/scdbpf\/RawType.html", "kind" : "class"}, {"name" : "io.github.memo33.scdbpf.S3d", "object" : "io\/github\/memo33\/scdbpf\/S3d$.html", "members_object" : [{"label" : "defaultMats", "tail" : "(transparency: S3d.Transparency.Value, id: Int, name: Option[String], mipmap: Boolean, wrapU: S3d.WrapMode.Value, wrapV: S3d.WrapMode.Value): MatsGroup", "member" : "io.github.memo33.scdbpf.S3d.defaultMats", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#defaultMats(transparency:io.github.memo33.scdbpf.S3d.Transparency.Value,id:Int,name:Option[String],mipmap:Boolean,wrapU:io.github.memo33.scdbpf.S3d.WrapMode.Value,wrapV:io.github.memo33.scdbpf.S3d.WrapMode.Value):io.github.memo33.scdbpf.S3d.MatsGroup", "kind" : "def"}, {"label" : "Transparency", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.Transparency", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#Transparency", "kind" : "object"}, {"label" : "RegpGroup", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.RegpGroup", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#RegpGroupextendsS3d.S3dGroupwithProductwithSerializable", "kind" : "case class"}, {"label" : "Orientation", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.Orientation", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#OrientationextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Translation", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.Translation", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#TranslationextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PropGroup", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.PropGroup", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#PropGroupextendsS3d.S3dGroupwithProductwithSerializable", "kind" : "case class"}, {"label" : "AnimSection", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.AnimSection", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#AnimSectionextendsS3d.IndexedSeqProxy[io.github.memo33.scdbpf.S3d.AnimGroup]withProductwithSerializable", "kind" : "case class"}, {"label" : "AnimGroup", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.AnimGroup", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#AnimGroup", "kind" : "object"}, {"label" : "AnimGroup", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.AnimGroup", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#AnimGroupextendsS3d.S3dGroupwithProductwithSerializable", "kind" : "case class"}, {"label" : "MatsGroup", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.MatsGroup", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#MatsGroupextendsS3d.S3dGroupwithProductwithSerializable", "kind" : "case class"}, {"label" : "Material", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.Material", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#MaterialextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PrimGroup", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.PrimGroup", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#PrimGroupextendsS3d.IndexedSeqProxy[io.github.memo33.scdbpf.S3d.Prim]withS3d.S3dGroupwithProductwithSerializable", "kind" : "case class"}, {"label" : "Prim", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.Prim", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#PrimextendsProductwithSerializable", "kind" : "case class"}, {"label" : "IndxGroup", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.IndxGroup", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#IndxGroupextendsS3d.IndexedSeqProxy[Int]withS3d.S3dGroupwithProductwithSerializable", "kind" : "case class"}, {"label" : "VertGroup", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.VertGroup", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#VertGroupextendsS3d.IndexedSeqProxy[io.github.memo33.scdbpf.S3d.Vert]withS3d.S3dGroupwithProductwithSerializable", "kind" : "case class"}, {"label" : "Vert", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.Vert", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#VertextendsIndexedSeq[Float]withProductwithSerializable", "kind" : "case class"}, {"label" : "MinifFilter", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.MinifFilter", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#MinifFilter", "kind" : "object"}, {"label" : "MagnifFilter", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.MagnifFilter", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#MagnifFilter", "kind" : "object"}, {"label" : "WrapMode", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.WrapMode", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#WrapMode", "kind" : "object"}, {"label" : "MatsBlend", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.MatsBlend", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#MatsBlend", "kind" : "object"}, {"label" : "MatsFunc", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.MatsFunc", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#MatsFunc", "kind" : "object"}, {"label" : "MatsFlags", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.MatsFlags", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#MatsFlags", "kind" : "object"}, {"label" : "PrimType", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.PrimType", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#PrimType", "kind" : "object"}, {"label" : "PlayMode", "tail" : "", "member" : "io.github.memo33.scdbpf.S3d.PlayMode", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#PlayMode", "kind" : "object"}, {"label" : "apply", "tail" : "(vert: IndexedSeq[VertGroup], indx: IndexedSeq[IndxGroup], prim: IndexedSeq[PrimGroup], mats: IndexedSeq[MatsGroup], anim: IndexedSeq[AnimGroup], prop: IndexedSeq[PropGroup], regp: IndexedSeq[RegpGroup]): S3d", "member" : "io.github.memo33.scdbpf.S3d.apply", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#apply(vert:IndexedSeq[io.github.memo33.scdbpf.S3d.VertGroup],indx:IndexedSeq[io.github.memo33.scdbpf.S3d.IndxGroup],prim:IndexedSeq[io.github.memo33.scdbpf.S3d.PrimGroup],mats:IndexedSeq[io.github.memo33.scdbpf.S3d.MatsGroup],anim:IndexedSeq[io.github.memo33.scdbpf.S3d.AnimGroup],prop:IndexedSeq[io.github.memo33.scdbpf.S3d.PropGroup],regp:IndexedSeq[io.github.memo33.scdbpf.S3d.RegpGroup]):io.github.memo33.scdbpf.S3d", "kind" : "def"}, {"label" : "apply", "tail" : "(vert: IndexedSeq[VertGroup], indx: IndexedSeq[IndxGroup], prim: IndexedSeq[PrimGroup], mats: IndexedSeq[MatsGroup], anim: AnimSection, prop: IndexedSeq[PropGroup], regp: IndexedSeq[RegpGroup]): S3d", "member" : "io.github.memo33.scdbpf.S3d.apply", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#apply(vert:IndexedSeq[io.github.memo33.scdbpf.S3d.VertGroup],indx:IndexedSeq[io.github.memo33.scdbpf.S3d.IndxGroup],prim:IndexedSeq[io.github.memo33.scdbpf.S3d.PrimGroup],mats:IndexedSeq[io.github.memo33.scdbpf.S3d.MatsGroup],anim:io.github.memo33.scdbpf.S3d.AnimSection,prop:IndexedSeq[io.github.memo33.scdbpf.S3d.PropGroup],regp:IndexedSeq[io.github.memo33.scdbpf.S3d.RegpGroup]):io.github.memo33.scdbpf.S3d", "kind" : "def"}, {"label" : "converter", "tail" : ": Converter[DbpfType, S3d]", "member" : "io.github.memo33.scdbpf.S3d.converter", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#converter:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.DbpfType,io.github.memo33.scdbpf.S3d]", "kind" : "implicit val"}, {"label" : "contentConverter", "tail" : "(): Converter[BufferedEntry[DbpfType], BufferedEntry[S3d]]", "member" : "io.github.memo33.scdbpf.DbpfTypeCompanion.contentConverter", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#contentConverter:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.BufferedEntry[io.github.memo33.scdbpf.DbpfType],io.github.memo33.scdbpf.BufferedEntry[B]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/S3d$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/github\/memo33\/scdbpf\/S3d.html", "kind" : "trait", "members_trait" : [{"label" : "translate", "tail" : "(t: Translation): S3d", "member" : "io.github.memo33.scdbpf.S3d.translate", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#translate(t:io.github.memo33.scdbpf.S3d.Translation):io.github.memo33.scdbpf.S3d", "kind" : "def"}, {"label" : "scale", "tail" : "(s: Float): S3d", "member" : "io.github.memo33.scdbpf.S3d.scale", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#scale(s:Float):io.github.memo33.scdbpf.S3d", "kind" : "def"}, {"label" : "++", "tail" : "(that: S3d): S3d", "member" : "io.github.memo33.scdbpf.S3d.++", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#++(that:io.github.memo33.scdbpf.S3d):io.github.memo33.scdbpf.S3d", "kind" : "def"}, {"label" : "trim", "tail" : "(): S3d", "member" : "io.github.memo33.scdbpf.S3d.trim", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#trim:io.github.memo33.scdbpf.S3d", "kind" : "def"}, {"label" : "*", "tail" : "(rf: RotFlip): S3d", "member" : "io.github.memo33.scdbpf.S3d.*", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#*(rf:io.github.memo33.scdbpf.DbpfUtil.RotFlip):io.github.memo33.scdbpf.S3d", "kind" : "def"}, {"label" : "withNormalsFlipped", "tail" : "(): S3d", "member" : "io.github.memo33.scdbpf.S3d.withNormalsFlipped", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#withNormalsFlipped:io.github.memo33.scdbpf.S3d", "kind" : "def"}, {"label" : "copy", "tail" : "(vert: IndexedSeq[VertGroup], indx: IndexedSeq[IndxGroup], prim: IndexedSeq[PrimGroup], mats: IndexedSeq[MatsGroup], anim: AnimSection, prop: IndexedSeq[PropGroup], regp: IndexedSeq[RegpGroup]): S3d", "member" : "io.github.memo33.scdbpf.S3d.copy", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#copy(vert:IndexedSeq[io.github.memo33.scdbpf.S3d.VertGroup],indx:IndexedSeq[io.github.memo33.scdbpf.S3d.IndxGroup],prim:IndexedSeq[io.github.memo33.scdbpf.S3d.PrimGroup],mats:IndexedSeq[io.github.memo33.scdbpf.S3d.MatsGroup],anim:io.github.memo33.scdbpf.S3d.AnimSection,prop:IndexedSeq[io.github.memo33.scdbpf.S3d.PropGroup],regp:IndexedSeq[io.github.memo33.scdbpf.S3d.RegpGroup]):io.github.memo33.scdbpf.S3d", "kind" : "def"}, {"label" : "convertTo", "tail" : "(dbpfType: DbpfTypeCompanion[B])(eh: ExceptionHandler): ![B, DbpfDecodeFailedException]", "member" : "io.github.memo33.scdbpf.DbpfType.convertTo", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#convertTo[B<:io.github.memo33.scdbpf.DbpfType](dbpfType:io.github.memo33.scdbpf.DbpfTypeCompanion[B])(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):B!io.github.memo33.scdbpf.DbpfDecodeFailedException", "kind" : "def"}, {"label" : "convert", "tail" : "(eh: ExceptionHandler, conv: Converter[DbpfType, B]): ![B, DbpfDecodeFailedException]", "member" : "io.github.memo33.scdbpf.DbpfType.convert", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#convert[B<:io.github.memo33.scdbpf.DbpfType](impliciteh:io.github.memo33.scdbpf.ExceptionHandler,implicitconv:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.DbpfType,B]):B!io.github.memo33.scdbpf.DbpfDecodeFailedException", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/S3d.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "regp", "tail" : ": IndexedSeq[RegpGroup]", "member" : "io.github.memo33.scdbpf.S3d.regp", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#regp:IndexedSeq[io.github.memo33.scdbpf.S3d.RegpGroup]", "kind" : "abstract val"}, {"label" : "prop", "tail" : ": IndexedSeq[PropGroup]", "member" : "io.github.memo33.scdbpf.S3d.prop", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#prop:IndexedSeq[io.github.memo33.scdbpf.S3d.PropGroup]", "kind" : "abstract val"}, {"label" : "anim", "tail" : ": AnimSection", "member" : "io.github.memo33.scdbpf.S3d.anim", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#anim:io.github.memo33.scdbpf.S3d.AnimSection", "kind" : "abstract val"}, {"label" : "mats", "tail" : ": IndexedSeq[MatsGroup]", "member" : "io.github.memo33.scdbpf.S3d.mats", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#mats:IndexedSeq[io.github.memo33.scdbpf.S3d.MatsGroup]", "kind" : "abstract val"}, {"label" : "prim", "tail" : ": IndexedSeq[PrimGroup]", "member" : "io.github.memo33.scdbpf.S3d.prim", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#prim:IndexedSeq[io.github.memo33.scdbpf.S3d.PrimGroup]", "kind" : "abstract val"}, {"label" : "indx", "tail" : ": IndexedSeq[IndxGroup]", "member" : "io.github.memo33.scdbpf.S3d.indx", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#indx:IndexedSeq[io.github.memo33.scdbpf.S3d.IndxGroup]", "kind" : "abstract val"}, {"label" : "vert", "tail" : ": IndexedSeq[VertGroup]", "member" : "io.github.memo33.scdbpf.S3d.vert", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#vert:IndexedSeq[io.github.memo33.scdbpf.S3d.VertGroup]", "kind" : "abstract val"}, {"label" : "data", "tail" : "(): Array[Byte]", "member" : "io.github.memo33.scdbpf.DbpfType.data", "link" : "io\/github\/memo33\/scdbpf\/S3d.html#data:Array[Byte]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "io.github.memo33.scdbpf.Sc4Path", "object" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html", "members_object" : [{"label" : "StrictParsing", "tail" : "", "member" : "io.github.memo33.scdbpf.Sc4Path.StrictParsing", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#StrictParsing", "kind" : "object"}, {"label" : "StopPath", "tail" : "", "member" : "io.github.memo33.scdbpf.Sc4Path.StopPath", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#StopPathextendsSc4Path.PathLikewithProductwithSerializable", "kind" : "case class"}, {"label" : "Path", "tail" : "", "member" : "io.github.memo33.scdbpf.Sc4Path.Path", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#PathextendsSc4Path.PathLikewithProductwithSerializable", "kind" : "case class"}, {"label" : "PathLike", "tail" : "", "member" : "io.github.memo33.scdbpf.Sc4Path.PathLike", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#PathLikeextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Cardinal", "tail" : "", "member" : "io.github.memo33.scdbpf.Sc4Path.Cardinal", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#Cardinal", "kind" : "object"}, {"label" : "Cardinal", "tail" : "", "member" : "io.github.memo33.scdbpf.Sc4Path.Cardinal", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#Cardinal=io.github.memo33.scdbpf.Sc4Path.Cardinal.Value", "kind" : "type"}, {"label" : "TransportType", "tail" : "", "member" : "io.github.memo33.scdbpf.Sc4Path.TransportType", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#TransportType", "kind" : "object"}, {"label" : "TransportType", "tail" : "", "member" : "io.github.memo33.scdbpf.Sc4Path.TransportType", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#TransportType=io.github.memo33.scdbpf.Sc4Path.TransportType.Value", "kind" : "type"}, {"label" : "threeDecimals", "tail" : ": DecimalFormat", "member" : "io.github.memo33.scdbpf.Sc4Path.threeDecimals", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#threeDecimals:java.text.DecimalFormat", "kind" : "val"}, {"label" : "Coord", "tail" : "", "member" : "io.github.memo33.scdbpf.Sc4Path.Coord", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#Coord=(Float,Float,Float)", "kind" : "type"}, {"label" : "converter", "tail" : ": Converter[DbpfType, Sc4Path]", "member" : "io.github.memo33.scdbpf.Sc4Path.converter", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#converter:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.DbpfType,io.github.memo33.scdbpf.Sc4Path]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(terrainVariance: Boolean, paths: Seq[Path], stopPaths: Seq[StopPath], decFormat: Option[DecimalFormat]): Sc4Path", "member" : "io.github.memo33.scdbpf.Sc4Path.apply", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#apply(terrainVariance:Boolean,paths:Seq[io.github.memo33.scdbpf.Sc4Path.Path],stopPaths:Seq[io.github.memo33.scdbpf.Sc4Path.StopPath],decFormat:Option[java.text.DecimalFormat]):io.github.memo33.scdbpf.Sc4Path", "kind" : "def"}, {"label" : "contentConverter", "tail" : "(): Converter[BufferedEntry[DbpfType], BufferedEntry[Sc4Path]]", "member" : "io.github.memo33.scdbpf.DbpfTypeCompanion.contentConverter", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#contentConverter:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.BufferedEntry[io.github.memo33.scdbpf.DbpfType],io.github.memo33.scdbpf.BufferedEntry[B]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/github\/memo33\/scdbpf\/Sc4Path.html", "kind" : "trait", "members_trait" : [{"label" : "toString", "tail" : "(): String", "member" : "io.github.memo33.scdbpf.Sc4Path.toString", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#toString():String", "kind" : "def"}, {"label" : "validateClassNumbers", "tail" : "(): Boolean", "member" : "io.github.memo33.scdbpf.Sc4Path.validateClassNumbers", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#validateClassNumbers:Boolean", "kind" : "def"}, {"label" : "renumberClassNumbers", "tail" : "(): Sc4Path", "member" : "io.github.memo33.scdbpf.Sc4Path.renumberClassNumbers", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#renumberClassNumbers:io.github.memo33.scdbpf.Sc4Path", "kind" : "def"}, {"label" : "++", "tail" : "(that: Sc4Path): Sc4Path", "member" : "io.github.memo33.scdbpf.Sc4Path.++", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#++(that:io.github.memo33.scdbpf.Sc4Path):io.github.memo33.scdbpf.Sc4Path", "kind" : "def"}, {"label" : "shiftHeight", "tail" : "(t: Float): Sc4Path", "member" : "io.github.memo33.scdbpf.Sc4Path.shiftHeight", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#shiftHeight(t:Float):io.github.memo33.scdbpf.Sc4Path", "kind" : "def"}, {"label" : "*", "tail" : "(rf: RotFlip): Sc4Path", "member" : "io.github.memo33.scdbpf.Sc4Path.*", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#*(rf:io.github.memo33.scdbpf.DbpfUtil.RotFlip):io.github.memo33.scdbpf.Sc4Path", "kind" : "def"}, {"label" : "copy", "tail" : "(terrainVariance: Boolean, paths: Seq[Path], stopPaths: Seq[StopPath], decFormat: Option[DecimalFormat]): Sc4Path", "member" : "io.github.memo33.scdbpf.Sc4Path.copy", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#copy(terrainVariance:Boolean,paths:Seq[io.github.memo33.scdbpf.Sc4Path.Path],stopPaths:Seq[io.github.memo33.scdbpf.Sc4Path.StopPath],decFormat:Option[java.text.DecimalFormat]):io.github.memo33.scdbpf.Sc4Path", "kind" : "def"}, {"label" : "convertTo", "tail" : "(dbpfType: DbpfTypeCompanion[B])(eh: ExceptionHandler): ![B, DbpfDecodeFailedException]", "member" : "io.github.memo33.scdbpf.DbpfType.convertTo", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#convertTo[B<:io.github.memo33.scdbpf.DbpfType](dbpfType:io.github.memo33.scdbpf.DbpfTypeCompanion[B])(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):B!io.github.memo33.scdbpf.DbpfDecodeFailedException", "kind" : "def"}, {"label" : "convert", "tail" : "(eh: ExceptionHandler, conv: Converter[DbpfType, B]): ![B, DbpfDecodeFailedException]", "member" : "io.github.memo33.scdbpf.DbpfType.convert", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#convert[B<:io.github.memo33.scdbpf.DbpfType](impliciteh:io.github.memo33.scdbpf.ExceptionHandler,implicitconv:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.DbpfType,B]):B!io.github.memo33.scdbpf.DbpfDecodeFailedException", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "decFormat", "tail" : "(): Option[DecimalFormat]", "member" : "io.github.memo33.scdbpf.Sc4Path.decFormat", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#decFormat:Option[java.text.DecimalFormat]", "kind" : "abstract def"}, {"label" : "stopPaths", "tail" : "(): Seq[StopPath]", "member" : "io.github.memo33.scdbpf.Sc4Path.stopPaths", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#stopPaths:Seq[io.github.memo33.scdbpf.Sc4Path.StopPath]", "kind" : "abstract def"}, {"label" : "paths", "tail" : "(): Seq[Path]", "member" : "io.github.memo33.scdbpf.Sc4Path.paths", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#paths:Seq[io.github.memo33.scdbpf.Sc4Path.Path]", "kind" : "abstract def"}, {"label" : "terrainVariance", "tail" : "(): Boolean", "member" : "io.github.memo33.scdbpf.Sc4Path.terrainVariance", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#terrainVariance:Boolean", "kind" : "abstract def"}, {"label" : "data", "tail" : "(): Array[Byte]", "member" : "io.github.memo33.scdbpf.DbpfType.data", "link" : "io\/github\/memo33\/scdbpf\/Sc4Path.html#data:Array[Byte]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "io.github.memo33.scdbpf.StreamedEntry", "shortDescription" : "A lightweight entry that reads its data as stream from a file withoutholding all the data constantly in memory.", "members_class" : [{"label" : "input", "tail" : "(): Input[Byte]", "member" : "io.github.memo33.scdbpf.StreamedEntry.input", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#input():io.github.memo33.scdbpf.compat.Input[Byte]", "kind" : "def"}, {"label" : "copy", "tail" : "(tgi: Tgi): StreamedEntry", "member" : "io.github.memo33.scdbpf.StreamedEntry.copy", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#copy(tgi:io.github.memo33.scdbpf.Tgi):io.github.memo33.scdbpf.StreamedEntry", "kind" : "def"}, {"label" : "size", "tail" : ": UInt", "member" : "io.github.memo33.scdbpf.StreamedEntry.size", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#size:io.github.memo33.passera.unsigned.UInt", "kind" : "val"}, {"label" : "tgi", "tail" : ": Tgi", "member" : "io.github.memo33.scdbpf.StreamedEntry.tgi", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#tgi:io.github.memo33.scdbpf.Tgi", "kind" : "val"}, {"label" : "toRawEntry", "tail" : "(eh: ExceptionHandler): ![RawEntry, DbpfIoException]", "member" : "io.github.memo33.scdbpf.DbpfEntry.toRawEntry", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#toRawEntry(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):io.github.memo33.scdbpf.RawEntry!io.github.memo33.scdbpf.DbpfIoException", "kind" : "def"}, {"label" : "toBufferedEntry", "tail" : "(eh: ExceptionHandler): ![BufferedEntry[DbpfType], DbpfIoException]", "member" : "io.github.memo33.scdbpf.DbpfEntry.toBufferedEntry", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#toBufferedEntry(impliciteh:io.github.memo33.scdbpf.ExceptionHandler):io.github.memo33.scdbpf.BufferedEntry[io.github.memo33.scdbpf.DbpfType]!io.github.memo33.scdbpf.DbpfIoException", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/github\/memo33\/scdbpf\/StreamedEntry.html", "kind" : "class"}, {"name" : "io.github.memo33.scdbpf.Tgi", "object" : "io\/github\/memo33\/scdbpf\/Tgi$.html", "members_object" : [{"label" : "Null", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.Null", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#Null:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "EffDir", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.EffDir", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#EffDir:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "Rul", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.Rul", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#Rul:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "Ini", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.Ini", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#Ini:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "IniNetwork", "tail" : ": Tgi", "member" : "io.github.memo33.scdbpf.Tgi.IniNetwork", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#IniNetwork:io.github.memo33.scdbpf.Tgi", "kind" : "val"}, {"label" : "IniFont", "tail" : ": Tgi", "member" : "io.github.memo33.scdbpf.Tgi.IniFont", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#IniFont:io.github.memo33.scdbpf.Tgi", "kind" : "val"}, {"label" : "LText", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.LText", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#LText:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "Wav", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.Wav", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#Wav:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "LuaGen", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.LuaGen", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#LuaGen:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "Lua", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.Lua", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#Lua:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "Png", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.Png", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#Png:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "PngIcon", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.PngIcon", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#PngIcon:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "Sc4Path", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.Sc4Path", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#Sc4Path:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "Sc4Path3d", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.Sc4Path3d", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#Sc4Path3d:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "Sc4Path2d", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.Sc4Path2d", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#Sc4Path2d:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "Fsh", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.Fsh", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#Fsh:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "FshUi", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.FshUi", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#FshUi:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "FshTerrainFoundation", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.FshTerrainFoundation", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#FshTerrainFoundation:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "FshAnimNonprops", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.FshAnimNonprops", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#FshAnimNonprops:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "FshAnimProps", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.FshAnimProps", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#FshAnimProps:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "FshShadow", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.FshShadow", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#FshShadow:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "FshBaseOverlay", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.FshBaseOverlay", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#FshBaseOverlay:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "FshMisc", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.FshMisc", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#FshMisc:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "Exemplar", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.Exemplar", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#Exemplar:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "ExemplarT21", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.ExemplarT21", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#ExemplarT21:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "ExemplarPowerpole", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.ExemplarPowerpole", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#ExemplarPowerpole:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "ExemplarSubway", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.ExemplarSubway", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#ExemplarSubway:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "ExemplarMonorail", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.ExemplarMonorail", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#ExemplarMonorail:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "ExemplarLightrail", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.ExemplarLightrail", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#ExemplarLightrail:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "ExemplarRail", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.ExemplarRail", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#ExemplarRail:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "ExemplarDirtroad", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.ExemplarDirtroad", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#ExemplarDirtroad:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "ExemplarGroundhighway", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.ExemplarGroundhighway", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#ExemplarGroundhighway:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "ExemplarHighway", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.ExemplarHighway", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#ExemplarHighway:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "ExemplarAvenue", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.ExemplarAvenue", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#ExemplarAvenue:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "ExemplarOnewayroad", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.ExemplarOnewayroad", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#ExemplarOnewayroad:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "ExemplarStreet", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.ExemplarStreet", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#ExemplarStreet:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "ExemplarRoad", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.ExemplarRoad", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#ExemplarRoad:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "Cohort", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.Cohort", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#Cohort:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "S3d", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.S3d", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#S3d:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "S3dMaxis", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.S3dMaxis", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#S3dMaxis:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "Ld", "tail" : ": TgiMask with LabeledTgi", "member" : "io.github.memo33.scdbpf.Tgi.Ld", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#Ld:io.github.memo33.scdbpf.TgiMaskwithio.github.memo33.scdbpf.Tgi.LabeledTgi", "kind" : "val"}, {"label" : "Directory", "tail" : ": Tgi", "member" : "io.github.memo33.scdbpf.Tgi.Directory", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#Directory:io.github.memo33.scdbpf.Tgi", "kind" : "val"}, {"label" : "Blank", "tail" : ": Tgi", "member" : "io.github.memo33.scdbpf.Tgi.Blank", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#Blank:io.github.memo33.scdbpf.Tgi", "kind" : "val"}, {"label" : "tigOrdering", "tail" : ": Ordering[Tgi]", "member" : "io.github.memo33.scdbpf.Tgi.tigOrdering", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#tigOrdering:Ordering[io.github.memo33.scdbpf.Tgi]", "kind" : "val"}, {"label" : "igtOrdering", "tail" : ": Ordering[Tgi]", "member" : "io.github.memo33.scdbpf.Tgi.igtOrdering", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#igtOrdering:Ordering[io.github.memo33.scdbpf.Tgi]", "kind" : "val"}, {"label" : "itgOrdering", "tail" : ": Ordering[Tgi]", "member" : "io.github.memo33.scdbpf.Tgi.itgOrdering", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#itgOrdering:Ordering[io.github.memo33.scdbpf.Tgi]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(tid: Int, gid: Int, iid: Int): Tgi", "member" : "io.github.memo33.scdbpf.Tgi.apply", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#apply(tid:Int,gid:Int,iid:Int):io.github.memo33.scdbpf.Tgi", "kind" : "def"}, {"label" : "LabeledTgi", "tail" : "", "member" : "io.github.memo33.scdbpf.Tgi.LabeledTgi", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#LabeledTgiextendsTgi.TgiLike", "kind" : "sealed trait"}, {"label" : "TgiLike", "tail" : "", "member" : "io.github.memo33.scdbpf.Tgi.TgiLike", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#TgiLikeextendsAnyRef", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Tgi$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/github\/memo33\/scdbpf\/Tgi.html", "kind" : "trait", "members_trait" : [{"label" : "toString", "tail" : "(): String", "member" : "io.github.memo33.scdbpf.Tgi.toString", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#toString():String", "kind" : "def"}, {"label" : "label", "tail" : "(): String", "member" : "io.github.memo33.scdbpf.Tgi.label", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#label:String", "kind" : "def"}, {"label" : "matches", "tail" : "(tgi: TgiLike): Boolean", "member" : "io.github.memo33.scdbpf.Tgi.matches", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#matches(tgi:io.github.memo33.scdbpf.Tgi.TgiLike):Boolean", "kind" : "def"}, {"label" : "copy", "tail" : "(tid: Int, gid: Int, iid: Int): Tgi", "member" : "io.github.memo33.scdbpf.Tgi.copy", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#copy(tid:Int,gid:Int,iid:Int):io.github.memo33.scdbpf.Tgi", "kind" : "def"}, {"label" : "copy", "tail" : "(mask: TgiMask): Tgi", "member" : "io.github.memo33.scdbpf.Tgi.copy", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#copy(mask:io.github.memo33.scdbpf.TgiMask):io.github.memo33.scdbpf.Tgi", "kind" : "def"}, {"label" : "SelfType", "tail" : "", "member" : "io.github.memo33.scdbpf.Tgi.SelfType", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#SelfType=io.github.memo33.scdbpf.Tgi", "kind" : "type"}, {"label" : "IdType", "tail" : "", "member" : "io.github.memo33.scdbpf.Tgi.IdType", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#IdType=Int", "kind" : "type"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "io.github.memo33.scdbpf.Tgi.TgiLike.hashCode", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "io.github.memo33.scdbpf.Tgi.TgiLike.equals", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#equals(obj:Any):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "iid", "tail" : ": IdType", "member" : "io.github.memo33.scdbpf.Tgi.TgiLike.iid", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#iid:TgiLike.this.IdType", "kind" : "abstract val"}, {"label" : "gid", "tail" : ": IdType", "member" : "io.github.memo33.scdbpf.Tgi.TgiLike.gid", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#gid:TgiLike.this.IdType", "kind" : "abstract val"}, {"label" : "tid", "tail" : ": IdType", "member" : "io.github.memo33.scdbpf.Tgi.TgiLike.tid", "link" : "io\/github\/memo33\/scdbpf\/Tgi.html#tid:TgiLike.this.IdType", "kind" : "abstract val"}], "shortDescription" : "Represents Type, Group, Instance identifiers of DbpfEntries."}, {"name" : "io.github.memo33.scdbpf.TgiMask", "object" : "io\/github\/memo33\/scdbpf\/TgiMask$.html", "members_object" : [{"label" : "apply", "tail" : "(tid: Option[Int], gid: Option[Int], iid: Option[Int]): TgiMask", "member" : "io.github.memo33.scdbpf.TgiMask.apply", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#apply(tid:Option[Int],gid:Option[Int],iid:Option[Int]):io.github.memo33.scdbpf.TgiMask", "kind" : "def"}, {"label" : "apply", "tail" : "(tid: Int, gid: Option[Int], iid: Option[Int]): TgiMask", "member" : "io.github.memo33.scdbpf.TgiMask.apply", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#apply(tid:Int,gid:Option[Int],iid:Option[Int]):io.github.memo33.scdbpf.TgiMask", "kind" : "def"}, {"label" : "apply", "tail" : "(tid: Int, gid: Int, iid: Option[Int]): TgiMask", "member" : "io.github.memo33.scdbpf.TgiMask.apply", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#apply(tid:Int,gid:Int,iid:Option[Int]):io.github.memo33.scdbpf.TgiMask", "kind" : "def"}, {"label" : "apply", "tail" : "(tid: Int, gid: Int, iid: Int): TgiMask", "member" : "io.github.memo33.scdbpf.TgiMask.apply", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#apply(tid:Int,gid:Int,iid:Int):io.github.memo33.scdbpf.TgiMask", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/TgiMask$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/github\/memo33\/scdbpf\/TgiMask.html", "kind" : "trait", "members_trait" : [{"label" : "toString", "tail" : "(): String", "member" : "io.github.memo33.scdbpf.TgiMask.toString", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#toString():String", "kind" : "def"}, {"label" : "toTgi", "tail" : "(): Tgi", "member" : "io.github.memo33.scdbpf.TgiMask.toTgi", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#toTgi:io.github.memo33.scdbpf.Tgi", "kind" : "def"}, {"label" : "copy", "tail" : "(tid: Option[Int], gid: Option[Int], iid: Option[Int]): TgiMask", "member" : "io.github.memo33.scdbpf.TgiMask.copy", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#copy(tid:Option[Int],gid:Option[Int],iid:Option[Int]):io.github.memo33.scdbpf.TgiMask", "kind" : "def"}, {"label" : "SelfType", "tail" : "", "member" : "io.github.memo33.scdbpf.TgiMask.SelfType", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#SelfType=io.github.memo33.scdbpf.TgiMask", "kind" : "type"}, {"label" : "IdType", "tail" : "", "member" : "io.github.memo33.scdbpf.TgiMask.IdType", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#IdType=Option[Int]", "kind" : "type"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "io.github.memo33.scdbpf.Tgi.TgiLike.hashCode", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "io.github.memo33.scdbpf.Tgi.TgiLike.equals", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#equals(obj:Any):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "iid", "tail" : ": IdType", "member" : "io.github.memo33.scdbpf.Tgi.TgiLike.iid", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#iid:TgiLike.this.IdType", "kind" : "abstract val"}, {"label" : "gid", "tail" : ": IdType", "member" : "io.github.memo33.scdbpf.Tgi.TgiLike.gid", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#gid:TgiLike.this.IdType", "kind" : "abstract val"}, {"label" : "tid", "tail" : ": IdType", "member" : "io.github.memo33.scdbpf.Tgi.TgiLike.tid", "link" : "io\/github\/memo33\/scdbpf\/TgiMask.html#tid:TgiLike.this.IdType", "kind" : "abstract val"}], "shortDescription" : "Represents masks of TGIs that are used for the match method of Tgi."}, {"name" : "io.github.memo33.scdbpf.WithContentConverter", "trait" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "contentConverter", "tail" : "(): Converter[BufferedEntry[DbpfType], BufferedEntry[B]]", "member" : "io.github.memo33.scdbpf.WithContentConverter.contentConverter", "link" : "io\/github\/memo33\/scdbpf\/WithContentConverter.html#contentConverter:io.github.memo33.scdbpf.DbpfUtil.Converter[io.github.memo33.scdbpf.BufferedEntry[io.github.memo33.scdbpf.DbpfType],io.github.memo33.scdbpf.BufferedEntry[B]]", "kind" : "abstract def"}], "shortDescription" : "This trait is used for companion objects of DbpfTypes and is needed in particular for Exemplars."}], "io.github.memo33" : [], "io.github.memo33.scdbpf.compat" : [{"name" : "io.github.memo33.scdbpf.compat.ByteArrayInput", "shortDescription" : "Makes an Array[Byte] viewable as an Input[Byte]", "members_case class" : [{"member" : "io.github.memo33.scdbpf.compat.ByteArrayInput#<init>", "error" : "unsupported entity"}, {"label" : "array", "tail" : ": Array[Byte]", "member" : "io.github.memo33.scdbpf.compat.ByteArrayInput.array", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#array:Array[Byte]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "io.github.memo33.scdbpf.compat.ByteInput.toString", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#toString():String", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "io.github.memo33.scdbpf.compat.ByteInput.close", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#close():Unit", "kind" : "def"}, {"label" : "readBlock", "tail" : "(array: Array[Byte], offset: Int, length: Int): Int", "member" : "io.github.memo33.scdbpf.compat.ByteInput.readBlock", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#readBlock(array:Array[Byte],offset:Int,length:Int):Int", "kind" : "def"}, {"label" : "read", "tail" : "(): Option[Byte]", "member" : "io.github.memo33.scdbpf.compat.ByteInput.read", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#read():Option[Byte]", "kind" : "def"}, {"label" : "ready", "tail" : "(): Boolean", "member" : "io.github.memo33.scdbpf.compat.ByteInput.ready", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#ready():Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(fn: (Byte) => U): Unit", "member" : "io.github.memo33.scdbpf.compat.Input.foreach", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#foreach[U](fn:Data=>U):Unit", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fn: (Byte) => Seq[T]): Input[T]", "member" : "io.github.memo33.scdbpf.compat.Input.flatMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#flatMap[T](fn:Data=>Seq[T]):io.github.memo33.scdbpf.compat.Input[T]", "kind" : "def"}, {"label" : "map", "tail" : "(fn: (Byte) => T): Input[T]", "member" : "io.github.memo33.scdbpf.compat.Input.map", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#map[T](fn:Data=>T):io.github.memo33.scdbpf.compat.Input[T]", "kind" : "def"}, {"label" : ">", "tail" : "(out: Output[Byte])(mf: ClassTag[Byte]): Int", "member" : "io.github.memo33.scdbpf.compat.Input.>", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#>(out:io.github.memo33.scdbpf.compat.Output[Data])(implicitmf:scala.reflect.ClassTag[Data]):Int", "kind" : "def"}, {"label" : "pumpTo", "tail" : "(out: Output[Byte])(mf: ClassTag[Byte]): Int", "member" : "io.github.memo33.scdbpf.compat.Input.pumpTo", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#pumpTo(out:io.github.memo33.scdbpf.compat.Output[Data])(implicitmf:scala.reflect.ClassTag[Data]):Int", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[Byte]", "member" : "io.github.memo33.scdbpf.compat.Input.iterator", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#iterator:Iterator[Data]", "kind" : "def"}, {"label" : "apply", "tail" : "(n: Int): Byte", "member" : "io.github.memo33.scdbpf.compat.Input.apply", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#apply(n:Int):Data", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "io.github.memo33.scdbpf.compat.Input.length", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#length:Int", "kind" : "def"}, {"label" : "iterableFactory", "tail" : "(): SeqFactory[Seq]", "member" : "scala.collection.immutable.Seq.iterableFactory", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#iterableFactory:scala.collection.SeqFactory[Seq]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): ByteArrayInput.this.type", "member" : "scala.collection.immutable.Seq.toSeq", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#toSeq:Seq.this.type", "kind" : "final def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.Seq.stringPrefix", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#stringPrefix:String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.collection.Seq.hashCode", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "scala.collection.Seq.equals", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.Seq.canEqual", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "search", "tail" : "(elem: B, from: Int, to: Int)(ord: Ordering[B]): SearchResult", "member" : "scala.collection.SeqOps.search", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#search[B>:A](elem:B,from:Int,to:Int)(implicitord:Ordering[B]):scala.collection.Searching.SearchResult", "kind" : "def"}, {"label" : "search", "tail" : "(elem: B)(ord: Ordering[B]): SearchResult", "member" : "scala.collection.SeqOps.search", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#search[B>:A](elem:B)(implicitord:Ordering[B]):scala.collection.Searching.SearchResult", "kind" : "def"}, {"label" : "occCounts", "tail" : "(sq: Seq[B]): Map[B, Int]", "member" : "scala.collection.SeqOps.occCounts", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#occCounts[B](sq:scala.collection.Seq[B]):scala.collection.mutable.Map[B,Int]", "kind" : "def"}, {"label" : "updated", "tail" : "(index: Int, elem: B): Seq[B]", "member" : "scala.collection.SeqOps.updated", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#updated[B>:A](index:Int,elem:B):CC[B]", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, other: IterableOnce[B], replaced: Int): Seq[B]", "member" : "scala.collection.SeqOps.patch", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#patch[B>:A](from:Int,other:scala.collection.IterableOnce[B],replaced:Int):CC[B]", "kind" : "def"}, {"label" : "intersect", "tail" : "(that: Seq[B]): Seq[Byte]", "member" : "scala.collection.SeqOps.intersect", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#intersect[B>:A](that:scala.collection.Seq[B]):C", "kind" : "def"}, {"label" : "diff", "tail" : "(that: Seq[B]): Seq[Byte]", "member" : "scala.collection.SeqOps.diff", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#diff[B>:A](that:scala.collection.Seq[B]):C", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: Seq[B])(p: (Byte, B) => Boolean): Boolean", "member" : "scala.collection.SeqOps.corresponds", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#corresponds[B](that:scala.collection.Seq[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: IterableOnce[B]): Boolean", "member" : "scala.collection.SeqOps.sameElements", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#sameElements[B>:A](that:scala.collection.IterableOnce[B]):Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.SeqOps.isEmpty", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "lengthIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.SeqOps.lengthIs", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#lengthIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "lengthCompare", "tail" : "(that: Iterable[_]): Int", "member" : "scala.collection.SeqOps.lengthCompare", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#lengthCompare(that:Iterable[_]):Int", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(that: Iterable[_]): Int", "member" : "scala.collection.SeqOps.sizeCompare", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#sizeCompare(that:Iterable[_]):Int", "kind" : "final def"}, {"label" : "lengthCompare", "tail" : "(len: Int): Int", "member" : "scala.collection.SeqOps.lengthCompare", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#lengthCompare(len:Int):Int", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.SeqOps.sizeCompare", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#sizeCompare(otherSize:Int):Int", "kind" : "final def"}, {"label" : "indices", "tail" : "(): Range", "member" : "scala.collection.SeqOps.indices", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#indices:scala.collection.immutable.Range", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (Byte) => B)(ord: Ordering[B]): Seq[Byte]", "member" : "scala.collection.SeqOps.sortBy", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#sortBy[B](f:A=>B)(implicitord:Ordering[B]):C", "kind" : "def"}, {"label" : "sortWith", "tail" : "(lt: (Byte, Byte) => Boolean): Seq[Byte]", "member" : "scala.collection.SeqOps.sortWith", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#sortWith(lt:(A,A)=>Boolean):C", "kind" : "def"}, {"label" : "sorted", "tail" : "(ord: Ordering[B]): Seq[Byte]", "member" : "scala.collection.SeqOps.sorted", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#sorted[B>:A](implicitord:Ordering[B]):C", "kind" : "def"}, {"label" : "combinations", "tail" : "(n: Int): Iterator[Seq[Byte]]", "member" : "scala.collection.SeqOps.combinations", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#combinations(n:Int):Iterator[C]", "kind" : "def"}, {"label" : "permutations", "tail" : "(): Iterator[Seq[Byte]]", "member" : "scala.collection.SeqOps.permutations", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#permutations:Iterator[C]", "kind" : "def"}, {"label" : "reverseMap", "tail" : "(f: (Byte) => B): Seq[B]", "member" : "scala.collection.SeqOps.reverseMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#reverseMap[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: A1): Boolean", "member" : "scala.collection.SeqOps.contains", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#contains[A1>:A](elem:A1):Boolean", "kind" : "def"}, {"label" : "containsSlice", "tail" : "(that: Seq[B]): Boolean", "member" : "scala.collection.SeqOps.containsSlice", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#containsSlice[B>:A](that:scala.collection.Seq[B]):Boolean", "kind" : "def"}, {"label" : "findLast", "tail" : "(p: (Byte) => Boolean): Option[Byte]", "member" : "scala.collection.SeqOps.findLast", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#findLast(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: Seq[B]): Int", "member" : "scala.collection.SeqOps.lastIndexOfSlice", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#lastIndexOfSlice[B>:A](that:scala.collection.Seq[B]):Int", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: Seq[B], end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexOfSlice", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#lastIndexOfSlice[B>:A](that:scala.collection.Seq[B],end:Int):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: Seq[B]): Int", "member" : "scala.collection.SeqOps.indexOfSlice", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#indexOfSlice[B>:A](that:scala.collection.Seq[B]):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: Seq[B], from: Int): Int", "member" : "scala.collection.SeqOps.indexOfSlice", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#indexOfSlice[B>:A](that:scala.collection.Seq[B],from:Int):Int", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (Byte) => Boolean): Int", "member" : "scala.collection.SeqOps.lastIndexWhere", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#lastIndexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (Byte) => Boolean, end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexWhere", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#lastIndexWhere(p:A=>Boolean,end:Int):Int", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(elem: B, end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#lastIndexOf[B>:A](elem:B,end:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.SeqOps.indexOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.SeqOps.indexOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Byte) => Boolean): Int", "member" : "scala.collection.SeqOps.indexWhere", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Byte) => Boolean, from: Int): Int", "member" : "scala.collection.SeqOps.indexWhere", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "prefixLength", "tail" : "(p: (Byte) => Boolean): Int", "member" : "scala.collection.SeqOps.prefixLength", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#prefixLength(p:A=>Boolean):Int", "kind" : "final def"}, {"label" : "segmentLength", "tail" : "(p: (Byte) => Boolean, from: Int): Int", "member" : "scala.collection.SeqOps.segmentLength", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#segmentLength(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "segmentLength", "tail" : "(p: (Byte) => Boolean): Int", "member" : "scala.collection.SeqOps.segmentLength", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#segmentLength(p:A=>Boolean):Int", "kind" : "final def"}, {"label" : "padTo", "tail" : "(len: Int, elem: B): Seq[B]", "member" : "scala.collection.SeqOps.padTo", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#padTo[B>:A](len:Int,elem:B):CC[B]", "kind" : "def"}, {"label" : "isDefinedAt", "tail" : "(idx: Int): Boolean", "member" : "scala.collection.SeqOps.isDefinedAt", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#isDefinedAt(idx:Int):Boolean", "kind" : "def"}, {"label" : "endsWith", "tail" : "(that: Iterable[B]): Boolean", "member" : "scala.collection.SeqOps.endsWith", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#endsWith[B>:A](that:Iterable[B]):Boolean", "kind" : "def"}, {"label" : "startsWith", "tail" : "(that: IterableOnce[B], offset: Int): Boolean", "member" : "scala.collection.SeqOps.startsWith", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#startsWith[B>:A](that:scala.collection.IterableOnce[B],offset:Int):Boolean", "kind" : "def"}, {"label" : "reverseIterator", "tail" : "(): Iterator[Byte]", "member" : "scala.collection.SeqOps.reverseIterator", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#reverseIterator:Iterator[A]", "kind" : "def"}, {"label" : "reverse", "tail" : "(): Seq[Byte]", "member" : "scala.collection.SeqOps.reverse", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#reverse:C", "kind" : "def"}, {"label" : "distinctBy", "tail" : "(f: (Byte) => B): Seq[Byte]", "member" : "scala.collection.SeqOps.distinctBy", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#distinctBy[B](f:A=>B):C", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Seq[Byte]", "member" : "scala.collection.SeqOps.distinct", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#distinct:C", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.SeqOps.size", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#size:Int", "kind" : "final def"}, {"label" : "union", "tail" : "(that: Seq[B]): Seq[B]", "member" : "scala.collection.SeqOps.union", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#union[B>:A](that:scala.collection.Seq[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.SeqOps.concat", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : ":++", "tail" : "(suffix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.SeqOps.:++", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#:++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "appendedAll", "tail" : "(suffix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.SeqOps.appendedAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#appendedAll[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "++:", "tail" : "(prefix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.SeqOps.++:", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#++:[B>:A](prefix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "prependedAll", "tail" : "(prefix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.SeqOps.prependedAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#prependedAll[B>:A](prefix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : ":+", "tail" : "(elem: B): Seq[B]", "member" : "scala.collection.SeqOps.:+", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#:+[B>:A](elem:B):CC[B]", "kind" : "final def"}, {"label" : "appended", "tail" : "(elem: B): Seq[B]", "member" : "scala.collection.SeqOps.appended", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#appended[B>:A](elem:B):CC[B]", "kind" : "def"}, {"label" : "+:", "tail" : "(elem: B): Seq[B]", "member" : "scala.collection.SeqOps.+:", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#+:[B>:A](elem:B):CC[B]", "kind" : "final def"}, {"label" : "prepended", "tail" : "(elem: B): Seq[B]", "member" : "scala.collection.SeqOps.prepended", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#prepended[B>:A](elem:B):CC[B]", "kind" : "def"}, {"label" : "view", "tail" : "(): SeqView[Byte]", "member" : "scala.collection.SeqOps.view", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#view:scala.collection.SeqView[A]", "kind" : "def"}, {"label" : "runWith", "tail" : "(action: (Byte) => U): (Int) => Boolean", "member" : "scala.PartialFunction.runWith", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#runWith[U](action:B=>U):A=>Boolean", "kind" : "def"}, {"label" : "applyOrElse", "tail" : "(x: A1, default: (A1) => B1): B1", "member" : "scala.PartialFunction.applyOrElse", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#applyOrElse[A1<:A,B1>:B](x:A1,default:A1=>B1):B1", "kind" : "def"}, {"label" : "lift", "tail" : "(): (Int) => Option[Byte]", "member" : "scala.PartialFunction.lift", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#lift:A=>Option[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(k: PartialFunction[R, Int]): PartialFunction[R, Byte]", "member" : "scala.PartialFunction.compose", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#compose[R](k:PartialFunction[R,A]):PartialFunction[R,B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: PartialFunction[Byte, C]): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#andThen[C](k:PartialFunction[B,C]):PartialFunction[A,C]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: (Byte) => C): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#andThen[C](k:B=>C):PartialFunction[A,C]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: PartialFunction[A1, B1]): PartialFunction[A1, B1]", "member" : "scala.PartialFunction.orElse", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#orElse[A1<:A,B1>:B](that:PartialFunction[A1,B1]):PartialFunction[A1,B1]", "kind" : "def"}, {"label" : "elementWise", "tail" : "(): ElementWiseExtractor[Int, Byte]", "member" : "scala.PartialFunction.elementWise", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#elementWise:PartialFunction.ElementWiseExtractor[A,B]", "kind" : "def"}, {"label" : "unapply", "tail" : "(a: Int): Option[Byte]", "member" : "scala.PartialFunction.unapply", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#unapply(a:A):Option[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Int): (A) => Byte", "member" : "scala.Function1.compose", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: Iterable[B]): LazyZip2[Byte, B, ByteArrayInput.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): ByteArrayInput.this.type", "member" : "scala.collection.Iterable.seq", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "coll", "tail" : "(): ByteArrayInput.this.type", "member" : "scala.collection.Iterable.coll", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): ByteArrayInput.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): Seq[Byte]", "member" : "scala.collection.IterableFactoryDefaults.empty", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#empty:CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[Byte, Seq[Byte]]", "member" : "scala.collection.IterableFactoryDefaults.newSpecificBuilder", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#newSpecificBuilder:scala.collection.mutable.Builder[A@scala.annotation.unchecked.uncheckedVariance,CC[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: IterableOnce[Byte]): Seq[Byte]", "member" : "scala.collection.IterableFactoryDefaults.fromSpecific", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#fromSpecific(coll:scala.collection.IterableOnce[A@scala.annotation.unchecked.uncheckedVariance]):CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (Byte) => U): Seq[Byte]", "member" : "scala.collection.IterableOps.tapEach", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Seq[Byte]]", "member" : "scala.collection.IterableOps.inits", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Seq[Byte]]", "member" : "scala.collection.IterableOps.tails", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Byte) => (A1, A2, A3)): (Seq[A1], Seq[A2], Seq[A3])", "member" : "scala.collection.IterableOps.unzip3", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Byte) => (A1, A2)): (Seq[A1], Seq[A2])", "member" : "scala.collection.IterableOps.unzip", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: Iterable[B], thisElem: A1, thatElem: B): Seq[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): Seq[(Byte, Int)]", "member" : "scala.collection.IterableOps.zipWithIndex", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#zipWithIndex:CC[(A@scala.annotation.unchecked.uncheckedVariance,Int)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: IterableOnce[B]): Seq[(Byte, B)]", "member" : "scala.collection.IterableOps.zip", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.IterableOps.++", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "partitionMap", "tail" : "(f: (Byte) => Either[A1, A2]): (Seq[A1], Seq[A2])", "member" : "scala.collection.IterableOps.partitionMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Byte, B]): Seq[B]", "member" : "scala.collection.IterableOps.collect", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#collect[B](pf:PartialFunction[A,B]):CC[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asIterable: (Byte) => IterableOnce[B]): Seq[B]", "member" : "scala.collection.IterableOps.flatten", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#flatten[B](implicitasIterable:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Byte) => IterableOnce[B]): Seq[B]", "member" : "scala.collection.IterableOps.flatMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Byte, B) => B): Seq[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Byte) => B): Seq[B]", "member" : "scala.collection.IterableOps.scanLeft", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): Seq[B]", "member" : "scala.collection.IterableOps.scan", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: (Byte) => K)(f: (Byte) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: (Byte) => K)(f: (Byte) => B): Map[K, Seq[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Byte) => K): Map[K, Seq[Byte]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Seq[Byte]", "member" : "scala.collection.IterableOps.slice", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "init", "tail" : "(): Seq[Byte]", "member" : "scala.collection.IterableOps.init", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): Seq[Byte]", "member" : "scala.collection.IterableOps.tail", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[Seq[Byte]]", "member" : "scala.collection.IterableOps.sliding", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[Seq[Byte]]", "member" : "scala.collection.IterableOps.sliding", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[Seq[Byte]]", "member" : "scala.collection.IterableOps.grouped", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Byte) => Boolean): Seq[Byte]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Seq[Byte]", "member" : "scala.collection.IterableOps.dropRight", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Seq[Byte]", "member" : "scala.collection.IterableOps.drop", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#drop(n:Int):C", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Byte) => Boolean): (Seq[Byte], Seq[Byte])", "member" : "scala.collection.IterableOps.span", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Byte) => Boolean): Seq[Byte]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Seq[Byte]", "member" : "scala.collection.IterableOps.takeRight", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Seq[Byte]", "member" : "scala.collection.IterableOps.take", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#take(n:Int):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Seq[Byte], Seq[Byte])", "member" : "scala.collection.IterableOps.splitAt", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Byte) => Boolean): (Seq[Byte], Seq[Byte])", "member" : "scala.collection.IterableOps.partition", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Byte) => Boolean): WithFilter[Byte, [_]Seq[_]]", "member" : "scala.collection.IterableOps.withFilter", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#withFilter(p:A=>Boolean):scala.collection.WithFilter[A,CC]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (Byte) => Boolean): Seq[Byte]", "member" : "scala.collection.IterableOps.filterNot", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (Byte) => Boolean): Seq[Byte]", "member" : "scala.collection.IterableOps.filter", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: (Byte) => Iterable[B]): Seq[Seq[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): View[Byte]", "member" : "scala.collection.IterableOps.view", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#view(from:Int,until:Int):scala.collection.View[A]", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "lastOption", "tail" : "(): Option[Byte]", "member" : "scala.collection.IterableOps.lastOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Byte", "member" : "scala.collection.IterableOps.last", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Byte]", "member" : "scala.collection.IterableOps.headOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): Byte", "member" : "scala.collection.IterableOps.head", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#head:A", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[[_]Seq[_]]", "member" : "scala.collection.IterableOps.companion", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): Seq[Byte]", "member" : "scala.collection.IterableOps.repr", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[Byte]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): Iterable[Byte]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): Stream[Byte]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[Byte]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Byte, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[Byte]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Byte]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Byte]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[Byte, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): b.type", "member" : "scala.collection.IterableOnceOps.addString", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#addString(b:StringBuilder):b.type", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): b.type", "member" : "scala.collection.IterableOnceOps.addString", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#addString(b:StringBuilder,sep:String):b.type", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): b.type", "member" : "scala.collection.IterableOnceOps.addString", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#addString(b:StringBuilder,start:String,sep:String,end:String):b.type", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: IterableOnce[B])(p: (Byte, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, Byte) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Byte, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (Byte) => B)(cmp: Ordering[B]): Option[Byte]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Byte) => B)(cmp: Ordering[B]): Byte", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (Byte) => B)(cmp: Ordering[B]): Option[Byte]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Byte) => B)(cmp: Ordering[B]): Byte", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: Ordering[B]): Option[Byte]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: Ordering[B]): Byte", "member" : "scala.collection.IterableOnceOps.max", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: Ordering[B]): Option[Byte]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: Ordering[B]): Byte", "member" : "scala.collection.IterableOnceOps.min", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Byte, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Byte) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Byte, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Byte) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Byte, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Byte) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Byte, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Byte) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Byte) => Boolean): Option[Byte]", "member" : "scala.collection.IterableOnceOps.find", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Byte) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Byte) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Byte) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[Byte, S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/github\/memo33\/scdbpf\/compat\/ByteArrayInput.html", "kind" : "case class"}, {"name" : "io.github.memo33.scdbpf.compat.ByteInput", "shortDescription" : "Wraps a java.io.InputStream as an Input[Byte]", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "io.github.memo33.scdbpf.compat.ByteInput.toString", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#toString():String", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "io.github.memo33.scdbpf.compat.ByteInput.close", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#close():Unit", "kind" : "def"}, {"label" : "readBlock", "tail" : "(array: Array[Byte], offset: Int, length: Int): Int", "member" : "io.github.memo33.scdbpf.compat.ByteInput.readBlock", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#readBlock(array:Array[Byte],offset:Int,length:Int):Int", "kind" : "def"}, {"label" : "read", "tail" : "(): Option[Byte]", "member" : "io.github.memo33.scdbpf.compat.ByteInput.read", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#read():Option[Byte]", "kind" : "def"}, {"label" : "ready", "tail" : "(): Boolean", "member" : "io.github.memo33.scdbpf.compat.ByteInput.ready", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#ready():Boolean", "kind" : "def"}, {"member" : "io.github.memo33.scdbpf.compat.ByteInput#<init>", "error" : "unsupported entity"}, {"label" : "foreach", "tail" : "(fn: (Byte) => U): Unit", "member" : "io.github.memo33.scdbpf.compat.Input.foreach", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#foreach[U](fn:Data=>U):Unit", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fn: (Byte) => Seq[T]): Input[T]", "member" : "io.github.memo33.scdbpf.compat.Input.flatMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#flatMap[T](fn:Data=>Seq[T]):io.github.memo33.scdbpf.compat.Input[T]", "kind" : "def"}, {"label" : "map", "tail" : "(fn: (Byte) => T): Input[T]", "member" : "io.github.memo33.scdbpf.compat.Input.map", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#map[T](fn:Data=>T):io.github.memo33.scdbpf.compat.Input[T]", "kind" : "def"}, {"label" : ">", "tail" : "(out: Output[Byte])(mf: ClassTag[Byte]): Int", "member" : "io.github.memo33.scdbpf.compat.Input.>", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#>(out:io.github.memo33.scdbpf.compat.Output[Data])(implicitmf:scala.reflect.ClassTag[Data]):Int", "kind" : "def"}, {"label" : "pumpTo", "tail" : "(out: Output[Byte])(mf: ClassTag[Byte]): Int", "member" : "io.github.memo33.scdbpf.compat.Input.pumpTo", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#pumpTo(out:io.github.memo33.scdbpf.compat.Output[Data])(implicitmf:scala.reflect.ClassTag[Data]):Int", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[Byte]", "member" : "io.github.memo33.scdbpf.compat.Input.iterator", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#iterator:Iterator[Data]", "kind" : "def"}, {"label" : "apply", "tail" : "(n: Int): Byte", "member" : "io.github.memo33.scdbpf.compat.Input.apply", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#apply(n:Int):Data", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "io.github.memo33.scdbpf.compat.Input.length", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#length:Int", "kind" : "def"}, {"label" : "iterableFactory", "tail" : "(): SeqFactory[Seq]", "member" : "scala.collection.immutable.Seq.iterableFactory", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#iterableFactory:scala.collection.SeqFactory[Seq]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): ByteInput.this.type", "member" : "scala.collection.immutable.Seq.toSeq", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#toSeq:Seq.this.type", "kind" : "final def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.Seq.stringPrefix", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#stringPrefix:String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.collection.Seq.hashCode", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "scala.collection.Seq.equals", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.Seq.canEqual", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "search", "tail" : "(elem: B, from: Int, to: Int)(ord: Ordering[B]): SearchResult", "member" : "scala.collection.SeqOps.search", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#search[B>:A](elem:B,from:Int,to:Int)(implicitord:Ordering[B]):scala.collection.Searching.SearchResult", "kind" : "def"}, {"label" : "search", "tail" : "(elem: B)(ord: Ordering[B]): SearchResult", "member" : "scala.collection.SeqOps.search", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#search[B>:A](elem:B)(implicitord:Ordering[B]):scala.collection.Searching.SearchResult", "kind" : "def"}, {"label" : "occCounts", "tail" : "(sq: Seq[B]): Map[B, Int]", "member" : "scala.collection.SeqOps.occCounts", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#occCounts[B](sq:scala.collection.Seq[B]):scala.collection.mutable.Map[B,Int]", "kind" : "def"}, {"label" : "updated", "tail" : "(index: Int, elem: B): Seq[B]", "member" : "scala.collection.SeqOps.updated", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#updated[B>:A](index:Int,elem:B):CC[B]", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, other: IterableOnce[B], replaced: Int): Seq[B]", "member" : "scala.collection.SeqOps.patch", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#patch[B>:A](from:Int,other:scala.collection.IterableOnce[B],replaced:Int):CC[B]", "kind" : "def"}, {"label" : "intersect", "tail" : "(that: Seq[B]): Seq[Byte]", "member" : "scala.collection.SeqOps.intersect", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#intersect[B>:A](that:scala.collection.Seq[B]):C", "kind" : "def"}, {"label" : "diff", "tail" : "(that: Seq[B]): Seq[Byte]", "member" : "scala.collection.SeqOps.diff", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#diff[B>:A](that:scala.collection.Seq[B]):C", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: Seq[B])(p: (Byte, B) => Boolean): Boolean", "member" : "scala.collection.SeqOps.corresponds", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#corresponds[B](that:scala.collection.Seq[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: IterableOnce[B]): Boolean", "member" : "scala.collection.SeqOps.sameElements", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#sameElements[B>:A](that:scala.collection.IterableOnce[B]):Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.SeqOps.isEmpty", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "lengthIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.SeqOps.lengthIs", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#lengthIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "lengthCompare", "tail" : "(that: Iterable[_]): Int", "member" : "scala.collection.SeqOps.lengthCompare", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#lengthCompare(that:Iterable[_]):Int", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(that: Iterable[_]): Int", "member" : "scala.collection.SeqOps.sizeCompare", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#sizeCompare(that:Iterable[_]):Int", "kind" : "final def"}, {"label" : "lengthCompare", "tail" : "(len: Int): Int", "member" : "scala.collection.SeqOps.lengthCompare", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#lengthCompare(len:Int):Int", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.SeqOps.sizeCompare", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#sizeCompare(otherSize:Int):Int", "kind" : "final def"}, {"label" : "indices", "tail" : "(): Range", "member" : "scala.collection.SeqOps.indices", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#indices:scala.collection.immutable.Range", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (Byte) => B)(ord: Ordering[B]): Seq[Byte]", "member" : "scala.collection.SeqOps.sortBy", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#sortBy[B](f:A=>B)(implicitord:Ordering[B]):C", "kind" : "def"}, {"label" : "sortWith", "tail" : "(lt: (Byte, Byte) => Boolean): Seq[Byte]", "member" : "scala.collection.SeqOps.sortWith", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#sortWith(lt:(A,A)=>Boolean):C", "kind" : "def"}, {"label" : "sorted", "tail" : "(ord: Ordering[B]): Seq[Byte]", "member" : "scala.collection.SeqOps.sorted", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#sorted[B>:A](implicitord:Ordering[B]):C", "kind" : "def"}, {"label" : "combinations", "tail" : "(n: Int): Iterator[Seq[Byte]]", "member" : "scala.collection.SeqOps.combinations", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#combinations(n:Int):Iterator[C]", "kind" : "def"}, {"label" : "permutations", "tail" : "(): Iterator[Seq[Byte]]", "member" : "scala.collection.SeqOps.permutations", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#permutations:Iterator[C]", "kind" : "def"}, {"label" : "reverseMap", "tail" : "(f: (Byte) => B): Seq[B]", "member" : "scala.collection.SeqOps.reverseMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#reverseMap[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: A1): Boolean", "member" : "scala.collection.SeqOps.contains", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#contains[A1>:A](elem:A1):Boolean", "kind" : "def"}, {"label" : "containsSlice", "tail" : "(that: Seq[B]): Boolean", "member" : "scala.collection.SeqOps.containsSlice", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#containsSlice[B>:A](that:scala.collection.Seq[B]):Boolean", "kind" : "def"}, {"label" : "findLast", "tail" : "(p: (Byte) => Boolean): Option[Byte]", "member" : "scala.collection.SeqOps.findLast", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#findLast(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: Seq[B]): Int", "member" : "scala.collection.SeqOps.lastIndexOfSlice", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#lastIndexOfSlice[B>:A](that:scala.collection.Seq[B]):Int", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: Seq[B], end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexOfSlice", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#lastIndexOfSlice[B>:A](that:scala.collection.Seq[B],end:Int):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: Seq[B]): Int", "member" : "scala.collection.SeqOps.indexOfSlice", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#indexOfSlice[B>:A](that:scala.collection.Seq[B]):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: Seq[B], from: Int): Int", "member" : "scala.collection.SeqOps.indexOfSlice", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#indexOfSlice[B>:A](that:scala.collection.Seq[B],from:Int):Int", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (Byte) => Boolean): Int", "member" : "scala.collection.SeqOps.lastIndexWhere", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#lastIndexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (Byte) => Boolean, end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexWhere", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#lastIndexWhere(p:A=>Boolean,end:Int):Int", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(elem: B, end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#lastIndexOf[B>:A](elem:B,end:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.SeqOps.indexOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.SeqOps.indexOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Byte) => Boolean): Int", "member" : "scala.collection.SeqOps.indexWhere", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Byte) => Boolean, from: Int): Int", "member" : "scala.collection.SeqOps.indexWhere", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "prefixLength", "tail" : "(p: (Byte) => Boolean): Int", "member" : "scala.collection.SeqOps.prefixLength", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#prefixLength(p:A=>Boolean):Int", "kind" : "final def"}, {"label" : "segmentLength", "tail" : "(p: (Byte) => Boolean, from: Int): Int", "member" : "scala.collection.SeqOps.segmentLength", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#segmentLength(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "segmentLength", "tail" : "(p: (Byte) => Boolean): Int", "member" : "scala.collection.SeqOps.segmentLength", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#segmentLength(p:A=>Boolean):Int", "kind" : "final def"}, {"label" : "padTo", "tail" : "(len: Int, elem: B): Seq[B]", "member" : "scala.collection.SeqOps.padTo", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#padTo[B>:A](len:Int,elem:B):CC[B]", "kind" : "def"}, {"label" : "isDefinedAt", "tail" : "(idx: Int): Boolean", "member" : "scala.collection.SeqOps.isDefinedAt", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#isDefinedAt(idx:Int):Boolean", "kind" : "def"}, {"label" : "endsWith", "tail" : "(that: Iterable[B]): Boolean", "member" : "scala.collection.SeqOps.endsWith", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#endsWith[B>:A](that:Iterable[B]):Boolean", "kind" : "def"}, {"label" : "startsWith", "tail" : "(that: IterableOnce[B], offset: Int): Boolean", "member" : "scala.collection.SeqOps.startsWith", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#startsWith[B>:A](that:scala.collection.IterableOnce[B],offset:Int):Boolean", "kind" : "def"}, {"label" : "reverseIterator", "tail" : "(): Iterator[Byte]", "member" : "scala.collection.SeqOps.reverseIterator", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#reverseIterator:Iterator[A]", "kind" : "def"}, {"label" : "reverse", "tail" : "(): Seq[Byte]", "member" : "scala.collection.SeqOps.reverse", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#reverse:C", "kind" : "def"}, {"label" : "distinctBy", "tail" : "(f: (Byte) => B): Seq[Byte]", "member" : "scala.collection.SeqOps.distinctBy", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#distinctBy[B](f:A=>B):C", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Seq[Byte]", "member" : "scala.collection.SeqOps.distinct", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#distinct:C", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.SeqOps.size", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#size:Int", "kind" : "final def"}, {"label" : "union", "tail" : "(that: Seq[B]): Seq[B]", "member" : "scala.collection.SeqOps.union", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#union[B>:A](that:scala.collection.Seq[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.SeqOps.concat", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : ":++", "tail" : "(suffix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.SeqOps.:++", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#:++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "appendedAll", "tail" : "(suffix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.SeqOps.appendedAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#appendedAll[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "++:", "tail" : "(prefix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.SeqOps.++:", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#++:[B>:A](prefix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "prependedAll", "tail" : "(prefix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.SeqOps.prependedAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#prependedAll[B>:A](prefix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : ":+", "tail" : "(elem: B): Seq[B]", "member" : "scala.collection.SeqOps.:+", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#:+[B>:A](elem:B):CC[B]", "kind" : "final def"}, {"label" : "appended", "tail" : "(elem: B): Seq[B]", "member" : "scala.collection.SeqOps.appended", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#appended[B>:A](elem:B):CC[B]", "kind" : "def"}, {"label" : "+:", "tail" : "(elem: B): Seq[B]", "member" : "scala.collection.SeqOps.+:", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#+:[B>:A](elem:B):CC[B]", "kind" : "final def"}, {"label" : "prepended", "tail" : "(elem: B): Seq[B]", "member" : "scala.collection.SeqOps.prepended", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#prepended[B>:A](elem:B):CC[B]", "kind" : "def"}, {"label" : "view", "tail" : "(): SeqView[Byte]", "member" : "scala.collection.SeqOps.view", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#view:scala.collection.SeqView[A]", "kind" : "def"}, {"label" : "runWith", "tail" : "(action: (Byte) => U): (Int) => Boolean", "member" : "scala.PartialFunction.runWith", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#runWith[U](action:B=>U):A=>Boolean", "kind" : "def"}, {"label" : "applyOrElse", "tail" : "(x: A1, default: (A1) => B1): B1", "member" : "scala.PartialFunction.applyOrElse", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#applyOrElse[A1<:A,B1>:B](x:A1,default:A1=>B1):B1", "kind" : "def"}, {"label" : "lift", "tail" : "(): (Int) => Option[Byte]", "member" : "scala.PartialFunction.lift", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#lift:A=>Option[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(k: PartialFunction[R, Int]): PartialFunction[R, Byte]", "member" : "scala.PartialFunction.compose", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#compose[R](k:PartialFunction[R,A]):PartialFunction[R,B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: PartialFunction[Byte, C]): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#andThen[C](k:PartialFunction[B,C]):PartialFunction[A,C]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: (Byte) => C): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#andThen[C](k:B=>C):PartialFunction[A,C]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: PartialFunction[A1, B1]): PartialFunction[A1, B1]", "member" : "scala.PartialFunction.orElse", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#orElse[A1<:A,B1>:B](that:PartialFunction[A1,B1]):PartialFunction[A1,B1]", "kind" : "def"}, {"label" : "elementWise", "tail" : "(): ElementWiseExtractor[Int, Byte]", "member" : "scala.PartialFunction.elementWise", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#elementWise:PartialFunction.ElementWiseExtractor[A,B]", "kind" : "def"}, {"label" : "unapply", "tail" : "(a: Int): Option[Byte]", "member" : "scala.PartialFunction.unapply", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#unapply(a:A):Option[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Int): (A) => Byte", "member" : "scala.Function1.compose", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: Iterable[B]): LazyZip2[Byte, B, ByteInput.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): ByteInput.this.type", "member" : "scala.collection.Iterable.seq", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "coll", "tail" : "(): ByteInput.this.type", "member" : "scala.collection.Iterable.coll", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): ByteInput.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): Seq[Byte]", "member" : "scala.collection.IterableFactoryDefaults.empty", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#empty:CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[Byte, Seq[Byte]]", "member" : "scala.collection.IterableFactoryDefaults.newSpecificBuilder", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#newSpecificBuilder:scala.collection.mutable.Builder[A@scala.annotation.unchecked.uncheckedVariance,CC[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: IterableOnce[Byte]): Seq[Byte]", "member" : "scala.collection.IterableFactoryDefaults.fromSpecific", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#fromSpecific(coll:scala.collection.IterableOnce[A@scala.annotation.unchecked.uncheckedVariance]):CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (Byte) => U): Seq[Byte]", "member" : "scala.collection.IterableOps.tapEach", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Seq[Byte]]", "member" : "scala.collection.IterableOps.inits", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Seq[Byte]]", "member" : "scala.collection.IterableOps.tails", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Byte) => (A1, A2, A3)): (Seq[A1], Seq[A2], Seq[A3])", "member" : "scala.collection.IterableOps.unzip3", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Byte) => (A1, A2)): (Seq[A1], Seq[A2])", "member" : "scala.collection.IterableOps.unzip", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: Iterable[B], thisElem: A1, thatElem: B): Seq[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): Seq[(Byte, Int)]", "member" : "scala.collection.IterableOps.zipWithIndex", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#zipWithIndex:CC[(A@scala.annotation.unchecked.uncheckedVariance,Int)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: IterableOnce[B]): Seq[(Byte, B)]", "member" : "scala.collection.IterableOps.zip", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.IterableOps.++", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "partitionMap", "tail" : "(f: (Byte) => Either[A1, A2]): (Seq[A1], Seq[A2])", "member" : "scala.collection.IterableOps.partitionMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Byte, B]): Seq[B]", "member" : "scala.collection.IterableOps.collect", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#collect[B](pf:PartialFunction[A,B]):CC[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asIterable: (Byte) => IterableOnce[B]): Seq[B]", "member" : "scala.collection.IterableOps.flatten", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#flatten[B](implicitasIterable:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Byte) => IterableOnce[B]): Seq[B]", "member" : "scala.collection.IterableOps.flatMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Byte, B) => B): Seq[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Byte) => B): Seq[B]", "member" : "scala.collection.IterableOps.scanLeft", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): Seq[B]", "member" : "scala.collection.IterableOps.scan", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: (Byte) => K)(f: (Byte) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: (Byte) => K)(f: (Byte) => B): Map[K, Seq[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Byte) => K): Map[K, Seq[Byte]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Seq[Byte]", "member" : "scala.collection.IterableOps.slice", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "init", "tail" : "(): Seq[Byte]", "member" : "scala.collection.IterableOps.init", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): Seq[Byte]", "member" : "scala.collection.IterableOps.tail", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[Seq[Byte]]", "member" : "scala.collection.IterableOps.sliding", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[Seq[Byte]]", "member" : "scala.collection.IterableOps.sliding", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[Seq[Byte]]", "member" : "scala.collection.IterableOps.grouped", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Byte) => Boolean): Seq[Byte]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Seq[Byte]", "member" : "scala.collection.IterableOps.dropRight", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Seq[Byte]", "member" : "scala.collection.IterableOps.drop", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#drop(n:Int):C", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Byte) => Boolean): (Seq[Byte], Seq[Byte])", "member" : "scala.collection.IterableOps.span", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Byte) => Boolean): Seq[Byte]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Seq[Byte]", "member" : "scala.collection.IterableOps.takeRight", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Seq[Byte]", "member" : "scala.collection.IterableOps.take", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#take(n:Int):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Seq[Byte], Seq[Byte])", "member" : "scala.collection.IterableOps.splitAt", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Byte) => Boolean): (Seq[Byte], Seq[Byte])", "member" : "scala.collection.IterableOps.partition", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Byte) => Boolean): WithFilter[Byte, [_]Seq[_]]", "member" : "scala.collection.IterableOps.withFilter", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#withFilter(p:A=>Boolean):scala.collection.WithFilter[A,CC]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (Byte) => Boolean): Seq[Byte]", "member" : "scala.collection.IterableOps.filterNot", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (Byte) => Boolean): Seq[Byte]", "member" : "scala.collection.IterableOps.filter", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: (Byte) => Iterable[B]): Seq[Seq[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): View[Byte]", "member" : "scala.collection.IterableOps.view", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#view(from:Int,until:Int):scala.collection.View[A]", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "lastOption", "tail" : "(): Option[Byte]", "member" : "scala.collection.IterableOps.lastOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Byte", "member" : "scala.collection.IterableOps.last", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Byte]", "member" : "scala.collection.IterableOps.headOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): Byte", "member" : "scala.collection.IterableOps.head", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#head:A", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[[_]Seq[_]]", "member" : "scala.collection.IterableOps.companion", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): Seq[Byte]", "member" : "scala.collection.IterableOps.repr", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[Byte]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): Iterable[Byte]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): Stream[Byte]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[Byte]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Byte, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[Byte]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Byte]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Byte]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[Byte, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): b.type", "member" : "scala.collection.IterableOnceOps.addString", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#addString(b:StringBuilder):b.type", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): b.type", "member" : "scala.collection.IterableOnceOps.addString", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#addString(b:StringBuilder,sep:String):b.type", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): b.type", "member" : "scala.collection.IterableOnceOps.addString", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#addString(b:StringBuilder,start:String,sep:String,end:String):b.type", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: IterableOnce[B])(p: (Byte, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, Byte) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Byte, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (Byte) => B)(cmp: Ordering[B]): Option[Byte]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Byte) => B)(cmp: Ordering[B]): Byte", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (Byte) => B)(cmp: Ordering[B]): Option[Byte]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Byte) => B)(cmp: Ordering[B]): Byte", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: Ordering[B]): Option[Byte]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: Ordering[B]): Byte", "member" : "scala.collection.IterableOnceOps.max", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: Ordering[B]): Option[Byte]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: Ordering[B]): Byte", "member" : "scala.collection.IterableOnceOps.min", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Byte, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Byte) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Byte, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Byte) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Byte, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Byte) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Byte, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Byte) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Byte) => Boolean): Option[Byte]", "member" : "scala.collection.IterableOnceOps.find", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Byte) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Byte) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Byte) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[Byte, S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/github\/memo33\/scdbpf\/compat\/ByteInput.html", "kind" : "class"}, {"name" : "io.github.memo33.scdbpf.compat.ByteOutput", "shortDescription" : "Wraps a java.io.OutputStream into an Output[Byte]", "members_class" : [{"label" : "writeBlock", "tail" : "(array: Array[Byte], offset: Int, length: Int): Int", "member" : "io.github.memo33.scdbpf.compat.ByteOutput.writeBlock", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#writeBlock(array:Array[Byte],offset:Int,length:Int):Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "io.github.memo33.scdbpf.compat.ByteOutput.toString", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#toString():String", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "io.github.memo33.scdbpf.compat.ByteOutput.close", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#close():Unit", "kind" : "def"}, {"label" : "flush", "tail" : "(): Unit", "member" : "io.github.memo33.scdbpf.compat.ByteOutput.flush", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#flush():Unit", "kind" : "def"}, {"label" : "write", "tail" : "(b: Byte): Unit", "member" : "io.github.memo33.scdbpf.compat.ByteOutput.write", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#write(b:Byte):Unit", "kind" : "def"}, {"member" : "io.github.memo33.scdbpf.compat.ByteOutput#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/github\/memo33\/scdbpf\/compat\/ByteOutput.html", "kind" : "class"}, {"name" : "io.github.memo33.scdbpf.compat.ExceptionHandler", "trait" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(eh2: ExceptionHandler): ExceptionHandler { type ![+T, E <: Exception] = T ! E ! E }", "member" : "io.github.memo33.scdbpf.compat.ExceptionHandler.compose", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#compose(eh2:io.github.memo33.scdbpf.compat.ExceptionHandler):io.github.memo33.scdbpf.compat.ExceptionHandler{type![+T,E<:Exception]=T!E!E}", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "wrap", "tail" : "(t: => T)(arg0: ClassTag[E]): ![T, E]", "member" : "io.github.memo33.scdbpf.compat.ExceptionHandler.wrap", "link" : "io\/github\/memo33\/scdbpf\/compat\/ExceptionHandler.html#wrap[T,E<:Exception](t:=>T)(implicitevidence$1:scala.reflect.ClassTag[E]):T!E", "kind" : "abstract def"}, {"member" : "io.github.memo33.scdbpf.compat.ExceptionHandler.!", "error" : "unsupported entity"}], "shortDescription" : ""}, {"name" : "io.github.memo33.scdbpf.compat.Gray", "shortDescription" : "", "members_case class" : [{"label" : "white", "tail" : "(): Byte", "member" : "io.github.memo33.scdbpf.compat.Gray.white", "link" : "io\/github\/memo33\/scdbpf\/compat\/Gray.html#white:Byte", "kind" : "def"}, {"member" : "io.github.memo33.scdbpf.compat.Gray#<init>", "error" : "unsupported entity"}, {"label" : "i", "tail" : ": Int", "member" : "io.github.memo33.scdbpf.compat.Gray.i", "link" : "io\/github\/memo33\/scdbpf\/compat\/Gray.html#i:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "io\/github\/memo33\/scdbpf\/compat\/Gray.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/github\/memo33\/scdbpf\/compat\/Gray.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/github\/memo33\/scdbpf\/compat\/Gray.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/Gray.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/Gray.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/github\/memo33\/scdbpf\/compat\/Gray.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/github\/memo33\/scdbpf\/compat\/Gray.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "io\/github\/memo33\/scdbpf\/compat\/Gray.html", "kind" : "case class"}, {"name" : "io.github.memo33.scdbpf.compat.Image", "trait" : "io\/github\/memo33\/scdbpf\/compat\/Image.html", "kind" : "trait", "members_trait" : [{"label" : "map", "tail" : "(f: (Int, Int) => A): Image[A]", "member" : "io.github.memo33.scdbpf.compat.Image.map", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#map(f:(Int,Int)=>A):io.github.memo33.scdbpf.compat.Image[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int, y: Int): A", "member" : "io.github.memo33.scdbpf.compat.Image.apply", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#apply(x:Int,y:Int):A", "kind" : "abstract def"}, {"label" : "height", "tail" : "(): Int", "member" : "io.github.memo33.scdbpf.compat.Image.height", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#height:Int", "kind" : "abstract def"}, {"label" : "width", "tail" : "(): Int", "member" : "io.github.memo33.scdbpf.compat.Image.width", "link" : "io\/github\/memo33\/scdbpf\/compat\/Image.html#width:Int", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "io.github.memo33.scdbpf.compat.Input", "object" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html", "members_object" : [{"label" : "slurpBytes", "tail" : "(input: Input[Byte])(eh: ExceptionHandler): ![Array[Byte], IOException]", "member" : "io.github.memo33.scdbpf.compat.Input.slurpBytes", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#slurpBytes(input:io.github.memo33.scdbpf.compat.Input[Byte])(impliciteh:io.github.memo33.scdbpf.compat.ExceptionHandler):Array[Byte]!java.io.IOException", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/github\/memo33\/scdbpf\/compat\/Input.html", "kind" : "trait", "members_trait" : [{"label" : "foreach", "tail" : "(fn: (Data) => U): Unit", "member" : "io.github.memo33.scdbpf.compat.Input.foreach", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#foreach[U](fn:Data=>U):Unit", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fn: (Data) => Seq[T]): Input[T]", "member" : "io.github.memo33.scdbpf.compat.Input.flatMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#flatMap[T](fn:Data=>Seq[T]):io.github.memo33.scdbpf.compat.Input[T]", "kind" : "def"}, {"label" : "map", "tail" : "(fn: (Data) => T): Input[T]", "member" : "io.github.memo33.scdbpf.compat.Input.map", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#map[T](fn:Data=>T):io.github.memo33.scdbpf.compat.Input[T]", "kind" : "def"}, {"label" : ">", "tail" : "(out: Output[Data])(mf: ClassTag[Data]): Int", "member" : "io.github.memo33.scdbpf.compat.Input.>", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#>(out:io.github.memo33.scdbpf.compat.Output[Data])(implicitmf:scala.reflect.ClassTag[Data]):Int", "kind" : "def"}, {"label" : "pumpTo", "tail" : "(out: Output[Data])(mf: ClassTag[Data]): Int", "member" : "io.github.memo33.scdbpf.compat.Input.pumpTo", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#pumpTo(out:io.github.memo33.scdbpf.compat.Output[Data])(implicitmf:scala.reflect.ClassTag[Data]):Int", "kind" : "def"}, {"label" : "readBlock", "tail" : "(array: Array[Data], offset: Int, length: Int): Int", "member" : "io.github.memo33.scdbpf.compat.Input.readBlock", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#readBlock(array:Array[Data],offset:Int,length:Int):Int", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[Data]", "member" : "io.github.memo33.scdbpf.compat.Input.iterator", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#iterator:Iterator[Data]", "kind" : "def"}, {"label" : "apply", "tail" : "(n: Int): Data", "member" : "io.github.memo33.scdbpf.compat.Input.apply", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#apply(n:Int):Data", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "io.github.memo33.scdbpf.compat.Input.length", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#length:Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "io.github.memo33.scdbpf.compat.Input.toString", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#toString():String", "kind" : "def"}, {"label" : "iterableFactory", "tail" : "(): SeqFactory[Seq]", "member" : "scala.collection.immutable.Seq.iterableFactory", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#iterableFactory:scala.collection.SeqFactory[Seq]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Input.this.type", "member" : "scala.collection.immutable.Seq.toSeq", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#toSeq:Seq.this.type", "kind" : "final def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.Seq.stringPrefix", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#stringPrefix:String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.collection.Seq.hashCode", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "scala.collection.Seq.equals", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.Seq.canEqual", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "search", "tail" : "(elem: B, from: Int, to: Int)(ord: Ordering[B]): SearchResult", "member" : "scala.collection.SeqOps.search", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#search[B>:A](elem:B,from:Int,to:Int)(implicitord:Ordering[B]):scala.collection.Searching.SearchResult", "kind" : "def"}, {"label" : "search", "tail" : "(elem: B)(ord: Ordering[B]): SearchResult", "member" : "scala.collection.SeqOps.search", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#search[B>:A](elem:B)(implicitord:Ordering[B]):scala.collection.Searching.SearchResult", "kind" : "def"}, {"label" : "occCounts", "tail" : "(sq: Seq[B]): Map[B, Int]", "member" : "scala.collection.SeqOps.occCounts", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#occCounts[B](sq:scala.collection.Seq[B]):scala.collection.mutable.Map[B,Int]", "kind" : "def"}, {"label" : "updated", "tail" : "(index: Int, elem: B): Seq[B]", "member" : "scala.collection.SeqOps.updated", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#updated[B>:A](index:Int,elem:B):CC[B]", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, other: IterableOnce[B], replaced: Int): Seq[B]", "member" : "scala.collection.SeqOps.patch", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#patch[B>:A](from:Int,other:scala.collection.IterableOnce[B],replaced:Int):CC[B]", "kind" : "def"}, {"label" : "intersect", "tail" : "(that: Seq[B]): Seq[Data]", "member" : "scala.collection.SeqOps.intersect", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#intersect[B>:A](that:scala.collection.Seq[B]):C", "kind" : "def"}, {"label" : "diff", "tail" : "(that: Seq[B]): Seq[Data]", "member" : "scala.collection.SeqOps.diff", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#diff[B>:A](that:scala.collection.Seq[B]):C", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: Seq[B])(p: (Data, B) => Boolean): Boolean", "member" : "scala.collection.SeqOps.corresponds", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#corresponds[B](that:scala.collection.Seq[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: IterableOnce[B]): Boolean", "member" : "scala.collection.SeqOps.sameElements", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#sameElements[B>:A](that:scala.collection.IterableOnce[B]):Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.SeqOps.isEmpty", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "lengthIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.SeqOps.lengthIs", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#lengthIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "lengthCompare", "tail" : "(that: Iterable[_]): Int", "member" : "scala.collection.SeqOps.lengthCompare", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#lengthCompare(that:Iterable[_]):Int", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(that: Iterable[_]): Int", "member" : "scala.collection.SeqOps.sizeCompare", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#sizeCompare(that:Iterable[_]):Int", "kind" : "final def"}, {"label" : "lengthCompare", "tail" : "(len: Int): Int", "member" : "scala.collection.SeqOps.lengthCompare", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#lengthCompare(len:Int):Int", "kind" : "def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.SeqOps.sizeCompare", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#sizeCompare(otherSize:Int):Int", "kind" : "final def"}, {"label" : "indices", "tail" : "(): Range", "member" : "scala.collection.SeqOps.indices", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#indices:scala.collection.immutable.Range", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (Data) => B)(ord: Ordering[B]): Seq[Data]", "member" : "scala.collection.SeqOps.sortBy", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#sortBy[B](f:A=>B)(implicitord:Ordering[B]):C", "kind" : "def"}, {"label" : "sortWith", "tail" : "(lt: (Data, Data) => Boolean): Seq[Data]", "member" : "scala.collection.SeqOps.sortWith", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#sortWith(lt:(A,A)=>Boolean):C", "kind" : "def"}, {"label" : "sorted", "tail" : "(ord: Ordering[B]): Seq[Data]", "member" : "scala.collection.SeqOps.sorted", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#sorted[B>:A](implicitord:Ordering[B]):C", "kind" : "def"}, {"label" : "combinations", "tail" : "(n: Int): Iterator[Seq[Data]]", "member" : "scala.collection.SeqOps.combinations", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#combinations(n:Int):Iterator[C]", "kind" : "def"}, {"label" : "permutations", "tail" : "(): Iterator[Seq[Data]]", "member" : "scala.collection.SeqOps.permutations", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#permutations:Iterator[C]", "kind" : "def"}, {"label" : "reverseMap", "tail" : "(f: (Data) => B): Seq[B]", "member" : "scala.collection.SeqOps.reverseMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#reverseMap[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: A1): Boolean", "member" : "scala.collection.SeqOps.contains", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#contains[A1>:A](elem:A1):Boolean", "kind" : "def"}, {"label" : "containsSlice", "tail" : "(that: Seq[B]): Boolean", "member" : "scala.collection.SeqOps.containsSlice", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#containsSlice[B>:A](that:scala.collection.Seq[B]):Boolean", "kind" : "def"}, {"label" : "findLast", "tail" : "(p: (Data) => Boolean): Option[Data]", "member" : "scala.collection.SeqOps.findLast", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#findLast(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: Seq[B]): Int", "member" : "scala.collection.SeqOps.lastIndexOfSlice", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#lastIndexOfSlice[B>:A](that:scala.collection.Seq[B]):Int", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: Seq[B], end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexOfSlice", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#lastIndexOfSlice[B>:A](that:scala.collection.Seq[B],end:Int):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: Seq[B]): Int", "member" : "scala.collection.SeqOps.indexOfSlice", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#indexOfSlice[B>:A](that:scala.collection.Seq[B]):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: Seq[B], from: Int): Int", "member" : "scala.collection.SeqOps.indexOfSlice", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#indexOfSlice[B>:A](that:scala.collection.Seq[B],from:Int):Int", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (Data) => Boolean): Int", "member" : "scala.collection.SeqOps.lastIndexWhere", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#lastIndexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (Data) => Boolean, end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexWhere", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#lastIndexWhere(p:A=>Boolean,end:Int):Int", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(elem: B, end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#lastIndexOf[B>:A](elem:B,end:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.SeqOps.indexOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.SeqOps.indexOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Data) => Boolean): Int", "member" : "scala.collection.SeqOps.indexWhere", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Data) => Boolean, from: Int): Int", "member" : "scala.collection.SeqOps.indexWhere", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "prefixLength", "tail" : "(p: (Data) => Boolean): Int", "member" : "scala.collection.SeqOps.prefixLength", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#prefixLength(p:A=>Boolean):Int", "kind" : "final def"}, {"label" : "segmentLength", "tail" : "(p: (Data) => Boolean, from: Int): Int", "member" : "scala.collection.SeqOps.segmentLength", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#segmentLength(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "segmentLength", "tail" : "(p: (Data) => Boolean): Int", "member" : "scala.collection.SeqOps.segmentLength", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#segmentLength(p:A=>Boolean):Int", "kind" : "final def"}, {"label" : "padTo", "tail" : "(len: Int, elem: B): Seq[B]", "member" : "scala.collection.SeqOps.padTo", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#padTo[B>:A](len:Int,elem:B):CC[B]", "kind" : "def"}, {"label" : "isDefinedAt", "tail" : "(idx: Int): Boolean", "member" : "scala.collection.SeqOps.isDefinedAt", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#isDefinedAt(idx:Int):Boolean", "kind" : "def"}, {"label" : "endsWith", "tail" : "(that: Iterable[B]): Boolean", "member" : "scala.collection.SeqOps.endsWith", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#endsWith[B>:A](that:Iterable[B]):Boolean", "kind" : "def"}, {"label" : "startsWith", "tail" : "(that: IterableOnce[B], offset: Int): Boolean", "member" : "scala.collection.SeqOps.startsWith", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#startsWith[B>:A](that:scala.collection.IterableOnce[B],offset:Int):Boolean", "kind" : "def"}, {"label" : "reverseIterator", "tail" : "(): Iterator[Data]", "member" : "scala.collection.SeqOps.reverseIterator", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#reverseIterator:Iterator[A]", "kind" : "def"}, {"label" : "reverse", "tail" : "(): Seq[Data]", "member" : "scala.collection.SeqOps.reverse", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#reverse:C", "kind" : "def"}, {"label" : "distinctBy", "tail" : "(f: (Data) => B): Seq[Data]", "member" : "scala.collection.SeqOps.distinctBy", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#distinctBy[B](f:A=>B):C", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Seq[Data]", "member" : "scala.collection.SeqOps.distinct", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#distinct:C", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.SeqOps.size", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#size:Int", "kind" : "final def"}, {"label" : "union", "tail" : "(that: Seq[B]): Seq[B]", "member" : "scala.collection.SeqOps.union", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#union[B>:A](that:scala.collection.Seq[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.SeqOps.concat", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : ":++", "tail" : "(suffix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.SeqOps.:++", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#:++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "appendedAll", "tail" : "(suffix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.SeqOps.appendedAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#appendedAll[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "++:", "tail" : "(prefix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.SeqOps.++:", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#++:[B>:A](prefix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "prependedAll", "tail" : "(prefix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.SeqOps.prependedAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#prependedAll[B>:A](prefix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : ":+", "tail" : "(elem: B): Seq[B]", "member" : "scala.collection.SeqOps.:+", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#:+[B>:A](elem:B):CC[B]", "kind" : "final def"}, {"label" : "appended", "tail" : "(elem: B): Seq[B]", "member" : "scala.collection.SeqOps.appended", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#appended[B>:A](elem:B):CC[B]", "kind" : "def"}, {"label" : "+:", "tail" : "(elem: B): Seq[B]", "member" : "scala.collection.SeqOps.+:", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#+:[B>:A](elem:B):CC[B]", "kind" : "final def"}, {"label" : "prepended", "tail" : "(elem: B): Seq[B]", "member" : "scala.collection.SeqOps.prepended", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#prepended[B>:A](elem:B):CC[B]", "kind" : "def"}, {"label" : "view", "tail" : "(): SeqView[Data]", "member" : "scala.collection.SeqOps.view", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#view:scala.collection.SeqView[A]", "kind" : "def"}, {"label" : "runWith", "tail" : "(action: (Data) => U): (Int) => Boolean", "member" : "scala.PartialFunction.runWith", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#runWith[U](action:B=>U):A=>Boolean", "kind" : "def"}, {"label" : "applyOrElse", "tail" : "(x: A1, default: (A1) => B1): B1", "member" : "scala.PartialFunction.applyOrElse", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#applyOrElse[A1<:A,B1>:B](x:A1,default:A1=>B1):B1", "kind" : "def"}, {"label" : "lift", "tail" : "(): (Int) => Option[Data]", "member" : "scala.PartialFunction.lift", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#lift:A=>Option[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(k: PartialFunction[R, Int]): PartialFunction[R, Data]", "member" : "scala.PartialFunction.compose", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#compose[R](k:PartialFunction[R,A]):PartialFunction[R,B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: PartialFunction[Data, C]): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#andThen[C](k:PartialFunction[B,C]):PartialFunction[A,C]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: (Data) => C): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#andThen[C](k:B=>C):PartialFunction[A,C]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: PartialFunction[A1, B1]): PartialFunction[A1, B1]", "member" : "scala.PartialFunction.orElse", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#orElse[A1<:A,B1>:B](that:PartialFunction[A1,B1]):PartialFunction[A1,B1]", "kind" : "def"}, {"label" : "elementWise", "tail" : "(): ElementWiseExtractor[Int, Data]", "member" : "scala.PartialFunction.elementWise", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#elementWise:PartialFunction.ElementWiseExtractor[A,B]", "kind" : "def"}, {"label" : "unapply", "tail" : "(a: Int): Option[Data]", "member" : "scala.PartialFunction.unapply", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#unapply(a:A):Option[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Int): (A) => Data", "member" : "scala.Function1.compose", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: Iterable[B]): LazyZip2[Data, B, Input.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): Input.this.type", "member" : "scala.collection.Iterable.seq", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "coll", "tail" : "(): Input.this.type", "member" : "scala.collection.Iterable.coll", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): Input.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): Seq[Data]", "member" : "scala.collection.IterableFactoryDefaults.empty", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#empty:CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[Data, Seq[Data]]", "member" : "scala.collection.IterableFactoryDefaults.newSpecificBuilder", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#newSpecificBuilder:scala.collection.mutable.Builder[A@scala.annotation.unchecked.uncheckedVariance,CC[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: IterableOnce[Data]): Seq[Data]", "member" : "scala.collection.IterableFactoryDefaults.fromSpecific", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#fromSpecific(coll:scala.collection.IterableOnce[A@scala.annotation.unchecked.uncheckedVariance]):CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (Data) => U): Seq[Data]", "member" : "scala.collection.IterableOps.tapEach", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Seq[Data]]", "member" : "scala.collection.IterableOps.inits", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Seq[Data]]", "member" : "scala.collection.IterableOps.tails", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Data) => (A1, A2, A3)): (Seq[A1], Seq[A2], Seq[A3])", "member" : "scala.collection.IterableOps.unzip3", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Data) => (A1, A2)): (Seq[A1], Seq[A2])", "member" : "scala.collection.IterableOps.unzip", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: Iterable[B], thisElem: A1, thatElem: B): Seq[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): Seq[(Data, Int)]", "member" : "scala.collection.IterableOps.zipWithIndex", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#zipWithIndex:CC[(A@scala.annotation.unchecked.uncheckedVariance,Int)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: IterableOnce[B]): Seq[(Data, B)]", "member" : "scala.collection.IterableOps.zip", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: IterableOnce[B]): Seq[B]", "member" : "scala.collection.IterableOps.++", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "partitionMap", "tail" : "(f: (Data) => Either[A1, A2]): (Seq[A1], Seq[A2])", "member" : "scala.collection.IterableOps.partitionMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Data, B]): Seq[B]", "member" : "scala.collection.IterableOps.collect", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#collect[B](pf:PartialFunction[A,B]):CC[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asIterable: (Data) => IterableOnce[B]): Seq[B]", "member" : "scala.collection.IterableOps.flatten", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#flatten[B](implicitasIterable:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Data) => IterableOnce[B]): Seq[B]", "member" : "scala.collection.IterableOps.flatMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Data, B) => B): Seq[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Data) => B): Seq[B]", "member" : "scala.collection.IterableOps.scanLeft", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): Seq[B]", "member" : "scala.collection.IterableOps.scan", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: (Data) => K)(f: (Data) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: (Data) => K)(f: (Data) => B): Map[K, Seq[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Data) => K): Map[K, Seq[Data]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Seq[Data]", "member" : "scala.collection.IterableOps.slice", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "init", "tail" : "(): Seq[Data]", "member" : "scala.collection.IterableOps.init", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): Seq[Data]", "member" : "scala.collection.IterableOps.tail", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[Seq[Data]]", "member" : "scala.collection.IterableOps.sliding", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[Seq[Data]]", "member" : "scala.collection.IterableOps.sliding", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[Seq[Data]]", "member" : "scala.collection.IterableOps.grouped", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Data) => Boolean): Seq[Data]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Seq[Data]", "member" : "scala.collection.IterableOps.dropRight", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Seq[Data]", "member" : "scala.collection.IterableOps.drop", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#drop(n:Int):C", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Data) => Boolean): (Seq[Data], Seq[Data])", "member" : "scala.collection.IterableOps.span", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Data) => Boolean): Seq[Data]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Seq[Data]", "member" : "scala.collection.IterableOps.takeRight", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Seq[Data]", "member" : "scala.collection.IterableOps.take", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#take(n:Int):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Seq[Data], Seq[Data])", "member" : "scala.collection.IterableOps.splitAt", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Data) => Boolean): (Seq[Data], Seq[Data])", "member" : "scala.collection.IterableOps.partition", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Data) => Boolean): WithFilter[Data, [_]Seq[_]]", "member" : "scala.collection.IterableOps.withFilter", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#withFilter(p:A=>Boolean):scala.collection.WithFilter[A,CC]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (Data) => Boolean): Seq[Data]", "member" : "scala.collection.IterableOps.filterNot", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (Data) => Boolean): Seq[Data]", "member" : "scala.collection.IterableOps.filter", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: (Data) => Iterable[B]): Seq[Seq[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): View[Data]", "member" : "scala.collection.IterableOps.view", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#view(from:Int,until:Int):scala.collection.View[A]", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "lastOption", "tail" : "(): Option[Data]", "member" : "scala.collection.IterableOps.lastOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Data", "member" : "scala.collection.IterableOps.last", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Data]", "member" : "scala.collection.IterableOps.headOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): Data", "member" : "scala.collection.IterableOps.head", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#head:A", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[[_]Seq[_]]", "member" : "scala.collection.IterableOps.companion", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): Seq[Data]", "member" : "scala.collection.IterableOps.repr", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[Data]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): Iterable[Data]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): Stream[Data]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[Data]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Data, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[Data]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Data]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Data]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[Data, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): b.type", "member" : "scala.collection.IterableOnceOps.addString", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#addString(b:StringBuilder):b.type", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): b.type", "member" : "scala.collection.IterableOnceOps.addString", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#addString(b:StringBuilder,sep:String):b.type", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): b.type", "member" : "scala.collection.IterableOnceOps.addString", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#addString(b:StringBuilder,start:String,sep:String,end:String):b.type", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: IterableOnce[B])(p: (Data, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, Data) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Data, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (Data) => B)(cmp: Ordering[B]): Option[Data]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Data) => B)(cmp: Ordering[B]): Data", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (Data) => B)(cmp: Ordering[B]): Option[Data]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Data) => B)(cmp: Ordering[B]): Data", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: Ordering[B]): Option[Data]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: Ordering[B]): Data", "member" : "scala.collection.IterableOnceOps.max", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: Ordering[B]): Option[Data]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: Ordering[B]): Data", "member" : "scala.collection.IterableOnceOps.min", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Data, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Data) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Data, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Data) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Data, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Data) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Data, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Data) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Data) => Boolean): Option[Data]", "member" : "scala.collection.IterableOnceOps.find", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Data) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Data) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Data) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[Data, S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "close", "tail" : "(): Unit", "member" : "io.github.memo33.scdbpf.compat.Input.close", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#close():Unit", "kind" : "abstract def"}, {"label" : "read", "tail" : "(): Option[Data]", "member" : "io.github.memo33.scdbpf.compat.Input.read", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#read():Option[Data]", "kind" : "abstract def"}, {"label" : "ready", "tail" : "(): Boolean", "member" : "io.github.memo33.scdbpf.compat.Input.ready", "link" : "io\/github\/memo33\/scdbpf\/compat\/Input.html#ready():Boolean", "kind" : "abstract def"}], "shortDescription" : "An Input provides an incoming stream of data"}, {"name" : "io.github.memo33.scdbpf.compat.Output", "trait" : "io\/github\/memo33\/scdbpf\/compat\/Output.html", "kind" : "trait", "members_trait" : [{"label" : "writeBlock", "tail" : "(array: Array[Data], offset: Int, length: Int): Int", "member" : "io.github.memo33.scdbpf.compat.Output.writeBlock", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#writeBlock(array:Array[Data],offset:Int,length:Int):Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "close", "tail" : "(): Unit", "member" : "io.github.memo33.scdbpf.compat.Output.close", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#close():Unit", "kind" : "abstract def"}, {"label" : "flush", "tail" : "(): Unit", "member" : "io.github.memo33.scdbpf.compat.Output.flush", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#flush():Unit", "kind" : "abstract def"}, {"label" : "write", "tail" : "(data: Data): Unit", "member" : "io.github.memo33.scdbpf.compat.Output.write", "link" : "io\/github\/memo33\/scdbpf\/compat\/Output.html#write(data:Data):Unit", "kind" : "abstract def"}], "shortDescription" : "Defines a generic output stream"}, {"name" : "io.github.memo33.scdbpf.compat.raw", "shortDescription" : "", "object" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html", "members_object" : [{"label" : "wrap", "tail" : "(t: => T)(arg0: ClassTag[E]): T", "member" : "io.github.memo33.scdbpf.compat.strategy.ThrowExceptions.wrap", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#wrap[T,E<:Exception](t:=>T)(implicitevidence$3:scala.reflect.ClassTag[E]):T", "kind" : "def"}, {"label" : "!", "tail" : "", "member" : "io.github.memo33.scdbpf.compat.strategy.ThrowExceptions.!", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#![+T,E<:Exception]=T", "kind" : "type"}, {"label" : "compose", "tail" : "(eh2: ExceptionHandler): ExceptionHandler { type ![+T, E <: Exception] = T ! E ! E }", "member" : "io.github.memo33.scdbpf.compat.ExceptionHandler.compose", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#compose(eh2:io.github.memo33.scdbpf.compat.ExceptionHandler):io.github.memo33.scdbpf.compat.ExceptionHandler{type![+T,E<:Exception]=T!E!E}", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/raw$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.github.memo33.scdbpf.compat.RGB", "shortDescription" : "", "object" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html", "members_object" : [{"label" : "fromChannels", "tail" : "(red: Int, green: Int, blue: Int): RGB", "member" : "io.github.memo33.scdbpf.compat.RGB.fromChannels", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#fromChannels(red:Int,green:Int,blue:Int):io.github.memo33.scdbpf.compat.RGB", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "blue", "tail" : "(): Int", "member" : "io.github.memo33.scdbpf.compat.RGB.blue", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB.html#blue:Int", "kind" : "def"}, {"label" : "green", "tail" : "(): Int", "member" : "io.github.memo33.scdbpf.compat.RGB.green", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB.html#green:Int", "kind" : "def"}, {"label" : "red", "tail" : "(): Int", "member" : "io.github.memo33.scdbpf.compat.RGB.red", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB.html#red:Int", "kind" : "def"}, {"member" : "io.github.memo33.scdbpf.compat.RGB#<init>", "error" : "unsupported entity"}, {"label" : "i", "tail" : ": Int", "member" : "io.github.memo33.scdbpf.compat.RGB.i", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB.html#i:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGB.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "io\/github\/memo33\/scdbpf\/compat\/RGB.html", "kind" : "case class"}, {"name" : "io.github.memo33.scdbpf.compat.RGBA", "shortDescription" : "", "members_case class" : [{"label" : "alpha", "tail" : "(): Byte", "member" : "io.github.memo33.scdbpf.compat.RGBA.alpha", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGBA.html#alpha:Byte", "kind" : "def"}, {"label" : "blue", "tail" : "(): Byte", "member" : "io.github.memo33.scdbpf.compat.RGBA.blue", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGBA.html#blue:Byte", "kind" : "def"}, {"label" : "green", "tail" : "(): Byte", "member" : "io.github.memo33.scdbpf.compat.RGBA.green", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGBA.html#green:Byte", "kind" : "def"}, {"label" : "red", "tail" : "(): Byte", "member" : "io.github.memo33.scdbpf.compat.RGBA.red", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGBA.html#red:Byte", "kind" : "def"}, {"member" : "io.github.memo33.scdbpf.compat.RGBA#<init>", "error" : "unsupported entity"}, {"label" : "i", "tail" : ": Int", "member" : "io.github.memo33.scdbpf.compat.RGBA.i", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGBA.html#i:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGBA.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGBA.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGBA.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGBA.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGBA.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGBA.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/github\/memo33\/scdbpf\/compat\/RGBA.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "io\/github\/memo33\/scdbpf\/compat\/RGBA.html", "kind" : "case class"}, {"name" : "io.github.memo33.scdbpf.compat.strategy", "shortDescription" : "", "object" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html", "members_object" : [{"label" : "ReturnFutures", "tail" : "", "member" : "io.github.memo33.scdbpf.compat.strategy.ReturnFutures", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#ReturnFuturesextendsExceptionHandler", "kind" : "class"}, {"label" : "returnFutures", "tail" : "(ec: ExecutionContext): ReturnFutures", "member" : "io.github.memo33.scdbpf.compat.strategy.returnFutures", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#returnFutures(implicitec:scala.concurrent.ExecutionContext):io.github.memo33.scdbpf.compat.strategy.ReturnFutures", "kind" : "implicit def"}, {"label" : "DiscardExceptions", "tail" : "", "member" : "io.github.memo33.scdbpf.compat.strategy.DiscardExceptions", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#DiscardExceptionsextendsExceptionHandler", "kind" : "class"}, {"label" : "discardExceptions", "tail" : ": DiscardExceptions", "member" : "io.github.memo33.scdbpf.compat.strategy.discardExceptions", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#discardExceptions:io.github.memo33.scdbpf.compat.strategy.DiscardExceptions", "kind" : "implicit val"}, {"label" : "Kcaco", "tail" : "", "member" : "io.github.memo33.scdbpf.compat.strategy.Kcaco", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#KcacoextendsExceptionHandler", "kind" : "class"}, {"label" : "kcaco", "tail" : ": Kcaco", "member" : "io.github.memo33.scdbpf.compat.strategy.kcaco", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#kcaco:io.github.memo33.scdbpf.compat.strategy.Kcaco", "kind" : "implicit val"}, {"label" : "ReturnTry", "tail" : "", "member" : "io.github.memo33.scdbpf.compat.strategy.ReturnTry", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#ReturnTryextendsExceptionHandler", "kind" : "class"}, {"label" : "returnTry", "tail" : "(): ReturnTry", "member" : "io.github.memo33.scdbpf.compat.strategy.returnTry", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#returnTry:io.github.memo33.scdbpf.compat.strategy.ReturnTry", "kind" : "implicit def"}, {"label" : "CaptureExceptions", "tail" : "", "member" : "io.github.memo33.scdbpf.compat.strategy.CaptureExceptions", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#CaptureExceptionsextendsExceptionHandler", "kind" : "class"}, {"label" : "captureExceptions", "tail" : "(): CaptureExceptions", "member" : "io.github.memo33.scdbpf.compat.strategy.captureExceptions", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#captureExceptions:io.github.memo33.scdbpf.compat.strategy.CaptureExceptions", "kind" : "implicit def"}, {"label" : "Explicit", "tail" : "", "member" : "io.github.memo33.scdbpf.compat.strategy.Explicit", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#Explicit[+T,E<:Exception]extendsAnyRef", "kind" : "class"}, {"label" : "ExplicitReturns", "tail" : "", "member" : "io.github.memo33.scdbpf.compat.strategy.ExplicitReturns", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#ExplicitReturnsextendsExceptionHandler", "kind" : "class"}, {"label" : "explicit", "tail" : "(): ExplicitReturns", "member" : "io.github.memo33.scdbpf.compat.strategy.explicit", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#explicit:io.github.memo33.scdbpf.compat.strategy.ExplicitReturns", "kind" : "implicit def"}, {"label" : "ThrowExceptions", "tail" : "", "member" : "io.github.memo33.scdbpf.compat.strategy.ThrowExceptions", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#ThrowExceptionsextendsExceptionHandler", "kind" : "class"}, {"label" : "throwExceptions", "tail" : "(): ThrowExceptions", "member" : "io.github.memo33.scdbpf.compat.strategy.throwExceptions", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#throwExceptions:io.github.memo33.scdbpf.compat.strategy.ThrowExceptions", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/github\/memo33\/scdbpf\/compat\/strategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "io.github" : [], "io" : []};